Directory structure for: /home/priyansh/Work/Prod/CkerDocs
Generated on: 2025-08-26T09:18:42.945Z
Total items: 133

├── docs
│   ├── lens
│   │   ├── accountwisebreakup
│   │   │   ├── currentmonth.md
│   │   │   ├── daily.md
│   │   │   ├── faq.md
│   │   │   ├── overview.md
│   │   │   └── previousmonth.md
│   │   ├── billingconsole
│   │   │   ├── currentmonth.md
│   │   │   ├── daily.md
│   │   │   ├── faq.md
│   │   │   ├── overview.md
│   │   │   └── previousmonth.md
│   │   ├── billingsummary
│   │   │   ├── costbreakup.md
│   │   │   ├── costinsights.md
│   │   │   ├── faq.md
│   │   │   ├── overview.md
│   │   │   ├── recommendations.md
│   │   │   └── servicewise.md
│   │   ├── costanalysis
│   │   │   ├── costexplorer.md
│   │   │   ├── faq.md
│   │   │   ├── overview.md
│   │   │   └── savedreports.md
│   │   ├── costbreakup
│   │   │   ├── cca.md
│   │   │   ├── dt.md
│   │   │   ├── faq.md
│   │   │   ├── nt.md
│   │   │   ├── others.md
│   │   │   └── overview.md
│   │   ├── hourlydashboard
│   │   │   ├── dtdashboard.md
│   │   │   ├── ec2dashboard.md
│   │   │   ├── faq.md
│   │   │   ├── others.md
│   │   │   ├── overview.md
│   │   │   └── savedreports.md
│   │   ├── notifications
│   │   │   ├── budgetalerts.md
│   │   │   ├── faq.md
│   │   │   ├── notifications.md
│   │   │   └── overview.md
│   │   ├── preferences
│   │   │   ├── faq.md
│   │   │   ├── mav.md
│   │   │   ├── overview.md
│   │   │   ├── password.md
│   │   │   ├── tags.md
│   │   │   └── users.md
│   │   ├── reservations
│   │   │   ├── coverage.md
│   │   │   ├── faq.md
│   │   │   ├── overview.md
│   │   │   ├── reservationsummary.md
│   │   │   └── utilization.md
│   │   ├── cur.md
│   │   ├── faq.md
│   │   ├── intro.md
│   │   ├── recommendations.md
│   │   ├── reports.md
│   │   └── topfeatures.md
│   └── tuner
│       ├── account
│       │   └── overview.md
│       ├── preferences
│       │   ├── faq.md
│       │   ├── mav.md
│       │   ├── overview.md
│       │   ├── password.md
│       │   └── users.md
│       ├── recommendations
│       │   ├── cleaner.md
│       │   ├── moredernization.md
│       │   ├── overprovisioned.md
│       │   ├── overview.md
│       │   ├── remedyhistory.md
│       │   └── snooze.md
│       ├── scheduler
│       │   └── overview.md
│       ├── spotbot
│       │   └── overview.md
│       ├── ckextension.md
│       ├── faq.md
│       ├── intro.md
│       └── topfeatures.md
├── src
│   ├── components
│   │   └── ValuePropsBanner
│   │       ├── index.jsx
│   │       └── index.module.css
│   ├── css
│   │   └── custom.css
│   ├── pages
│   │   ├── coming-soon.jsx
│   │   ├── coming-soon.module.css
│   │   ├── index.js
│   │   ├── index.module.css
│   │   ├── lens.js
│   │   └── tuner.js
│   └── theme
│       └── SearchBar
│           ├── index.js
│           └── styles.css
├── static
│   └── img
│       ├── accountwisebreakup
│       ├── billingconsole
│       ├── billingsummary
│       ├── ckextension
│       ├── costbreakup
│       │   ├── cca
│       │   ├── dt
│       │   └── network
│       ├── costexplorer
│       ├── cur
│       ├── hourlydashboard
│       ├── icons
│       ├── notifications
│       ├── preferences
│       ├── recommendations
│       ├── reports
│       ├── reservations
│       ├── scheduler
│       ├── spotbot
│       ├── tuneraccounts
│       └── tunerrecommend
├── analysis.txt
├── docusaurus.config.js
├── package.json
└── sidebars.js

================================================
File: analysis.txt
================================================
================================================
File: docs/lens/accountwisebreakup/currentmonth.md
================================================
================================================
File: docs/lens/accountwisebreakup/daily.md
================================================
================================================
File: docs/lens/accountwisebreakup/faq.md
================================================
================================================
File: docs/lens/accountwisebreakup/overview.md
================================================
================================================
File: docs/lens/accountwisebreakup/previousmonth.md
================================================
================================================
File: docs/lens/billingconsole/currentmonth.md
================================================
================================================
File: docs/lens/billingconsole/daily.md
================================================
Directory structure for: /home/priyansh/Work/Prod/CkerDocs
Generated on: 2025-08-26T09:18:42.945Z
Total items: 133

├── docs
│   ├── lens
│   │   ├── accountwisebreakup
│   │   │   ├── currentmonth.md
│   │   │   ├── daily.md
│   │   │   ├── faq.md
│   │   │   ├── overview.md
│   │   │   └── previousmonth.md
│   │   ├── billingconsole
│   │   │   ├── currentmonth.md
│   │   │   ├── daily.md
│   │   │   ├── faq.md
│   │   │   ├── overview.md
│   │   │   └── previousmonth.md
│   │   ├── billingsummary
│   │   │   ├── costbreakup.md
│   │   │   ├── costinsights.md
│   │   │   ├── faq.md
│   │   │   ├── overview.md
│   │   │   ├── recommendations.md
│   │   │   └── servicewise.md
│   │   ├── costanalysis
│   │   │   ├── costexplorer.md
│   │   │   ├── faq.md
│   │   │   ├── overview.md
│   │   │   └── savedreports.md
│   │   ├── costbreakup
│   │   │   ├── cca.md
│   │   │   ├── dt.md
│   │   │   ├── faq.md
│   │   │   ├── nt.md
│   │   │   ├── others.md
│   │   │   └── overview.md
│   │   ├── hourlydashboard
│   │   │   ├── dtdashboard.md
│   │   │   ├── ec2dashboard.md
│   │   │   ├── faq.md
│   │   │   ├── others.md
│   │   │   ├── overview.md
│   │   │   └── savedreports.md
│   │   ├── notifications
│   │   │   ├── budgetalerts.md
│   │   │   ├── faq.md
│   │   │   ├── notifications.md
│   │   │   └── overview.md
│   │   ├── preferences
│   │   │   ├── faq.md
│   │   │   ├── mav.md
│   │   │   ├── overview.md
│   │   │   ├── password.md
│   │   │   ├── tags.md
│   │   │   └── users.md
│   │   ├── reservations
│   │   │   ├── coverage.md
│   │   │   ├── faq.md
│   │   │   ├── overview.md
│   │   │   ├── reservationsummary.md
│   │   │   └── utilization.md
│   │   ├── cur.md
│   │   ├── faq.md
│   │   ├── intro.md
│   │   ├── recommendations.md
│   │   ├── reports.md
│   │   └── topfeatures.md
│   └── tuner
│       ├── account
│       │   └── overview.md
│       ├── preferences
│       │   ├── faq.md
│       │   ├── mav.md
│       │   ├── overview.md
│       │   ├── password.md
│       │   └── users.md
│       ├── recommendations
│       │   ├── cleaner.md
│       │   ├── moredernization.md
│       │   ├── overprovisioned.md
│       │   ├── overview.md
│       │   ├── remedyhistory.md
│       │   └── snooze.md
│       ├── scheduler
│       │   └── overview.md
│       ├── spotbot
│       │   └── overview.md
│       ├── ckextension.md
│       ├── faq.md
│       ├── intro.md
│       └── topfeatures.md
├── src
│   ├── components
│   │   └── ValuePropsBanner
│   │       ├── index.jsx
│   │       └── index.module.css
│   ├── css
│   │   └── custom.css
│   ├── pages
│   │   ├── coming-soon.jsx
│   │   ├── coming-soon.module.css
│   │   ├── index.js
│   │   ├── index.module.css
│   │   ├── lens.js
│   │   └── tuner.js
│   └── theme
│       └── SearchBar
│           ├── index.js
│           └── styles.css
├── static
│   └── img
│       ├── accountwisebreakup
│       ├── billingconsole
│       ├── billingsummary
│       ├── ckextension
│       ├── costbreakup
│       │   ├── cca
│       │   ├── dt
│       │   └── network
│       ├── costexplorer
│       ├── cur
│       ├── hourlydashboard
│       ├── icons
│       ├── notifications
│       ├── preferences
│       ├── recommendations
│       ├── reports
│       ├── reservations
│       ├── scheduler
│       ├── spotbot
│       ├── tuneraccounts
│       └── tunerrecommend
├── analysis.txt
├── docusaurus.config.js
├── package.json
└── sidebars.js

================================================
File: analysis.txt
================================================
================================================
File: docs/lens/accountwisebreakup/currentmonth.md
================================================
================================================
File: docs/lens/accountwisebreakup/daily.md
================================================
================================================
File: docs/lens/accountwisebreakup/faq.md
================================================
================================================
File: docs/lens/accountwisebreakup/overview.md
================================================
================================================
File: docs/lens/accountwisebreakup/previousmonth.md
================================================
================================================
File: docs/lens/billingconsole/currentmonth.md
================================================
================================================
File: docs/lens/billingconsole/daily.md
================================================


================================================
File: docs/lens/billingconsole/faq.md
================================================
---
sidebar_position: 2
title: Current Month
---

import React from 'react';

# Current Month

This page provides a **real-time breakdown** of your AWS spending for the **current month**, with detailed cost analysis for each account and its associated services.

---

### Total Spend for Each Account

- **Sentinel Account**: $782,621.35
- **Thunderstrike Account**: $53,978.18

These values reflect your **total spending** for each account, enabling you to track costs at the account level.

<div style={{ textAlign: 'center' }}>
  <img src="/img/accountwisebreakup/account-breakup-overview.png" alt="Account-wise cost breakup overview" />
</div>

---

### Service-wise Breakdown

This section shows the breakdown of costs by service and region within the **Sentinel** and **Thunderstrike** accounts.

<div style={{ textAlign: 'center' }}>
  <img src="/img/accountwisebreakup/account-breakup-monthly-trend.png" alt="Account-wise monthly cost trend" />
</div>

<div style={{ textAlign: 'center' }}>
  <img src="/img/accountwisebreakup/account-breakup-service-distribution.png" alt="Account-wise service cost distribution" />
</div>

This breakdown helps you identify the **high-cost services** for each account, enabling more **targeted optimization** efforts.

---



================================================
File: docs/lens/billingconsole/overview.md
================================================
---
title: FAQs
---

**Q: [Placeholder Question for Category 1]?**  
A: [Your answer goes here]

================================================
File: docs/lens/billingconsole/previousmonth.md
================================================
---
sidebar_position: 4
title: Daily Breakdown
---

import React from 'react';

# Daily Breakdown

This page provides a **day-by-day cost breakdown** of your AWS services across individual accounts, helping you monitor **daily fluctuations** in both usage and spending.

---

### Daily Cost Overview & Trends

This section presents **daily costs** by account and service, offering a clear view of **cost fluctuations** throughout the month.  
The data visualization uses **color-coded indicators** to highlight **cost spikes** and **patterns**, making it easier to identify anomalies or unexpected usage trends.

<div style={{ textAlign: 'center' }}>
  <img src="/img/accountwisebreakup/account-breakup-resource-table.png" alt="Account-wise resource cost table" />
</div>

---


================================================
File: docs/lens/billingsummary/costbreakup.md
================================================
---
sidebar_position: 1
title: Overview
---

# Account-Wise Breakup

The Account-Wise Breakup section provides **daily** and **monthly** expense details, enabling precise monitoring at the individual account level within a MAV (Multi-Account View).

---

### Linked Account Insights

Similar to the MAV view, users can also see the **Billing Console** view for each individual linked account within this section. This allows for detailed tracking and analysis of spending patterns on a per-account basis.

---

### Downloadable Reports

All data can be downloaded in **XLSX workbook format**, providing the same level of detail and insights as available on the Lens dashboard.

---

================================================
File: docs/lens/billingsummary/costinsights.md
================================================
---
sidebar_position: 2
title: Current Month
---

import React from 'react';

# Current Month Overview

This page offers a real-time breakdown of your AWS spending for the **current month**. It helps you track your **spending trends** and monitor how you are performing against your budget and forecast.

---

### Total Spend

The **Total Spend** for the current month reflects the actual cost you’ve incurred so far in your cloud usage. You can compare this with the forecast to see if your expenses are trending as expected.

- **Current Month Spend**: $712,102

This value helps you keep track of your cloud costs and understand your financial performance for the month.

<div style={{ textAlign: 'center' }}>
  <img src="/img/billingconsole/billing-console-overview.png" alt="Billing console overview dashboard" />
</div>

---


### Service-wise Cost Breakdown

In this section, you can see how much each AWS service has contributed to your total spend for the current month. The breakdown helps you understand where most of your budget is being allocated.

- **Elastic Compute Cloud (EC2)**: $100,000  
- **Simple Storage Service (S3)**: $150,000  
- **Data Transfer**: $45,000  

Understanding the service-level breakdown allows you to make more informed decisions about your infrastructure and optimize your usage.

<div style={{ textAlign: 'center' }}>
  <img src="/img/billingconsole/billing-console-monthly-trend.png" alt="Billing console monthly cost trend" />
</div>

---



================================================
File: docs/lens/billingsummary/faq.md
================================================
---
sidebar_position: 3
title: Previous Months
---

import React from 'react';

# Previous Months

This page offers a **comparison** of your AWS spending between the **current month** and the **previous months**. It helps you understand **spending trends**, identify **cost fluctuations**, and make informed decisions for optimizing cloud usage.

---

### Total Spend Comparison

- **Previous Month Spend (Sentinel)**: $854,635  
- **Current Month Spend (Sentinel)**: $782,621

Comparing the **previous** and **current** month costs helps you understand how your cloud spend has evolved.

<div style={{ textAlign: 'center' }}>
  <img src="/img/accountwisebreakup/account-breakup-region-distribution.png" alt="Account-wise region cost distribution" />
</div>

---

### Breakdown by Service and Region/Usage

This section helps you track **month-to-month variations** in AWS service usage and spending.

Breakdown of costs by **region** and **usage type** allows for better resource allocation and optimization.

- **Sentinel - CloudTrail Cost - Asia Pacific**: $2,000  
- **Sentinel - CloudTrail Cost - US East**: $550  

This breakdown helps you optimize **regional service usage** and better manage your cost distribution.

<div style={{ textAlign: 'center' }}>
  <img src="/img/accountwisebreakup/account-breakup-detailed-view.png" alt="Account-wise detailed cost view" />
</div>


================================================
File: docs/lens/billingsummary/overview.md
================================================
---
sidebar_position: 4
title: Daily Breakdown
---

import React from 'react';

# Daily Breakdown Overview

The **Daily Breakdown** page provides a granular, day-by-day view of your AWS spend for the current month. It helps you **track daily fluctuations**, identify **cost anomalies**, and monitor **service-wise usage trends** effectively.

---

### Features

- **Daily Cost Table**: View total daily costs and compare spending across each day to spot anomalies or spikes.
- **Cost Trends Graph**: Visualize spending fluctuations with a line or bar graph to identify trends or unusual surges in usage.
- **Service-wise Daily Breakdown**: Analyze how much each AWS service (like EC2, S3, or Data Transfer) contributed to your costs on a given day.

This detailed breakdown supports better **cost control**, **anomaly detection**, and **resource optimization**.

---

<div style={{ textAlign: 'center' }}>
  <img src="/img/billingconsole/billing-console-detailed-view.png" alt="Billing console detailed cost view" />
</div>


================================================
File: docs/lens/billingsummary/recommendations.md
================================================
---
title: FAQs
---

**Q: [Placeholder Question for Category 1]?**  
A: [Your answer goes here]

================================================
File: docs/lens/billingsummary/servicewise.md
================================================
---
sidebar_position: 1
title: Overview
---

# Billing Console

The Billing Console offers a detailed view of both **monthly** and **daily** costs incurred by the user.  

Costs are grouped at the **service**, **region**, and **usage type** levels, providing a granular breakdown for better visibility and analysis.

The page provides both **summary and detailed views** of costs—whether you're looking at a high-level monthly report or a line-by-line daily cost breakdown, the Billing Console equips users with the clarity needed to understand their cloud spend.

---

### Features

- **Month-on-Month Trend**: By selecting the *Previous Month* button, users can view month-on-month cost trends and highlight changes in spending over time.
- **Daily Breakup**: The *Daily Breakup* option reveals a detailed day-wise cost breakdown to track daily spending patterns.
- **Downloadable Reports**: All data is available for download in **XLSX workbook format**, with the same level of detail as the Lens dashboard.

---

### Long-Term Insights

- Historical data is preserved from the day of onboarding to Lens.
- Valuable for analyzing long-term trends and enabling effective budget planning and allocation.

---


================================================
File: docs/lens/costanalysis/costexplorer.md
================================================
---
sidebar_position: 3
title: Previous Months
---

import React from 'react';

# Previous Months Overview

This page provides a **comparison** of your AWS spending between the **current month** and the **previous months**. It helps you understand **spending trends**, identify **cost fluctuations**, and make informed decisions for optimizing your cloud usage going forward.

---

### Total Spend Comparison

The **Total Spend** for the previous month reflects the cost incurred in the months prior. This metric allows you to **compare** your previous month’s actual costs with the **current month**'s spending to assess **trends and changes**.

- **Previous Month Spend**: $854,635  
- **Current Month Spend**: $712,102

This comparison helps you **evaluate spending trends** and pinpoint areas where costs have decreased or increased significantly.

<div style={{ textAlign: 'center' }}>
  <img src="/img/billingconsole/billing-console-service-breakdown.png" alt="Billing console service cost breakdown" />
</div>

---

### Service-wise Breakdown for Previous Month

The **Service-wise Cost Breakdown** displays your spending **by service** for the previous month. It helps you analyze where your costs are concentrated and identifies **high-cost services**.

- **Elastic Compute Cloud (EC2)**: $120,000  
- **Simple Storage Service (S3)**: $150,000  
- **Data Transfer**: $60,000  

This breakdown allows users to dive into specific services that are contributing most to their cloud bill and to plan for **optimization** and **cost reduction** strategies.

---

### Breakdown by Region/Usage

The previous month's cost is further broken down by **region** and **usage type**. This section provides insights into **where your costs are coming from** geographically and which services have higher consumption.

- **Asia Pacific (Mumbai)**: $50,000  
- **US East (N. Virginia)**: $30,000  

This detailed breakdown helps you understand **regional variations** and optimize **resource allocation**.

<div style={{ textAlign: 'center' }}>
  <img src="/img/billingconsole/billing-console-account-breakdown.png" alt="Billing console account cost breakdown" />
</div>

---



================================================
File: docs/lens/costanalysis/faq.md
================================================
---
sidebar_position: 4
title: Cost Breakup Dashboards
---

## Cost Breakup Dashboards


import React from 'react';

<div style={{ textAlign: 'center' }}>
  <img src="/img/billingsummary/billing-summary-detailed-view.png" alt="Billing summary detailed cost view" />
</div>

This section provides detailed insights into your costs across various AWS services:

- **Elastic Compute Cloud (EC2)**: Displays your EC2-related costs, which typically make up the largest portion of your bill.
- **Simple Storage Service (S3)**: Breakdown of storage costs, helping users optimize data storage and find cost-saving opportunities.
- **Data Transfer**: Shows how much is being spent on inter-region or external data transfer.
- **Amazon CloudFront**, **Amazon CloudWatch**: Provides detailed breakdowns for content delivery and monitoring services.



================================================
File: docs/lens/costanalysis/overview.md
================================================
---
sidebar_position: 2
title: Cost Insights
---

### Cost Insights

import React from 'react';

<div style={{ textAlign: 'center' }}>
  <img src="/img/billingsummary/billing-summary-overview.png" alt="Billing summary overview dashboard" />
</div>

This section provides essential cost metrics for your AWS spending:

- **Past Month**: Reflects the total spending for the previous month, offering a historical context.
- **Current Month**: Shows the ongoing spending for the current month, helping you keep track of real-time costs.
- **Forecast**: Projects the anticipated cost for the remainder of the month, allowing for better planning.
- **Daily Average**: Provides a metric for daily average spending, useful for comparing your daily costs against expected usage.


================================================
File: docs/lens/costanalysis/savedreports.md
================================================
---
title: FAQs
---

**Q: [Placeholder Question for Category 1]?**  
A: [Your answer goes here]

================================================
File: docs/lens/costbreakup/cca.md
================================================
---
sidebar_position: 3
title: Recommendations
---

### Recommendations

import React from 'react';

<div style={{ textAlign: 'center' }}>
  <img src="/img/billingsummary/billing-summary-cost-trend.png" alt="Billing summary cost trend" />
</div>

This section provides tailored, data-driven suggestions for optimizing your AWS costs:

- **Move to Lower-Cost Instances**: Identifies services or instances that can be switched to more cost-effective options, ensuring performance while reducing costs.
- **Remove Idle Network Resources**: Suggests deleting unused resources, such as Load Balancers or NAT Gateways, to avoid unnecessary spending.
- **Leverage Different Storage Classes**: Recommendations for using alternative storage tiers, like S3 Glacier, to optimize costs related to data storage.
- **Upgrade Version to Remove Extended Support Costs**: Helps you identify and upgrade legacy versions of services that are incurring extended support costs.

import Admonition from '@theme/Admonition';

<Admonition type="note" title="Note">
  These recommendations are based on CUR (Cost and Usage Report) data and best practices.
  They do not take into account real-time metrics, such as actual usage or dynamic resource allocation.
  Make sure to validate and analyze your actual resource utilization before applying any recommendations.
</Admonition>



================================================
File: docs/lens/costbreakup/dt.md
================================================
---
sidebar_position: 1
title: Overview
---

# Billing Summary

This page provides a comprehensive overview of your AWS account's billing details.  

From the **MAV section** at the top, you can also select individual accounts as needed.

import Admonition from '@theme/Admonition';

<Admonition type="note" title="Note">
    A **MAV (Multi-Account View)** is simply a **logical grouping of AWS accounts**, it provides a convenient way to manage and report on a specific set of accounts within CloudKeeper Offerings.
</Admonition>

---

### Top Banner Metrics

- Cost for the **previous month**.
- **Current month's** cost.
- **Projected cost** for the current month.
- **Daily average** spend.

---

### Service-wise Cost Breakup Trend

- Detailed analysis of costs incurred across various AWS services.
- Includes **heatmap view** and **chart view** for visual clarity.
- Data can be downloaded as an **XLSX workbook**, providing the same granularity as on the Lens dashboard.

---

### Cost Breakdowns

- View **daily**, **weekly**, and **monthly** breakdowns.
- Quickly assess **service-specific spending trends** to make informed decisions.

---

================================================
File: docs/lens/costbreakup/faq.md
================================================
---
sidebar_position: 2
title: Service Cost Trend
---

# Service-wise Cost Breakup Trend

This section provides a daily breakdown of AWS service-wise spend to help you visually analyze cost changes and spot anomalies quickly.

---

### Key Features

- **Daily Cost Tracking**: Track cost movement across AWS services for each day.
- **Total Summary Row**: See aggregate daily spend for all services at the bottom.
- **Interactive Controls**: Options to toggle between daily, weekly, and monthly views.
- **Download Option**: The cost data can be exported in `.xlsx` format for deeper analysis or reporting needs.

---

### Sample Heatmap View

<div style={{ textAlign: 'center' }}>
  <img src="/img/billingsummary/service-cost-heatmap.png" alt="Service-wise Cost Breakup Heatmap" />
</div>

---

This visualization helps users quickly identify services with unusual spending behavior and take timely actions to optimize cloud costs.


================================================
File: docs/lens/costbreakup/nt.md
================================================
---
title: FAQs
---

**Q: [Placeholder Question for Category 1]?**  
A: [Your answer goes here]

================================================
File: docs/lens/costbreakup/others.md
================================================
---
sidebar_position: 2
title: Cost Explorer
---

import React from 'react';

# Cost Explorer

The **Cost Explorer** is CloudKeeper Lens's most detailed and powerful tool for analyzing AWS spending. It allows you to drill down to the most granular levels to investigate cost trends, detect anomalies, and identify optimization opportunities.

It is designed to give you complete control and visibility over your AWS costs, down to the deepest levels. It empowers you to:

- Diagnose unexpected spikes
- Compare regions, services, and resources
- Create targeted cost optimization strategies
- Improve forecasting and budgeting

By combining powerful grouping, filtering, and visualization tools, Cost Explorer becomes an essential asset for your FinOps and engineering teams.


---

### Group By Options

You can group your data in many ways to get targeted insights:

- **Service**
- **Region**
- **Instance Type**
- **Account ID**
- **Platform**
- **Usage Type Group**
- **Usage Type**
- **Tags**
- **More options** (e.g., Charge Type, API Operation, Resource, etc.)

<div style={{ textAlign: 'center' }}>
  <img src="/img/costexplorer/cost-explorer-overview.png" alt="Cost explorer overview dashboard" />
</div>

---

### Filters

Refine your view using advanced filters:

- Service, Instance Type, Account ID
- Usage Type and Usage Type Group
- Platform, Region, Purchase Option
- API Operation, Resource
- Tags, Charge Type, Availability Zone
- Tenancy, Legal Entity, Billing Entity

Filters allow you to isolate exactly where costs are coming from, so you can understand *why* and *how* they are changing.

---

### Service and Region Example

A common use case: you notice higher costs in a particular service. You can use **Service Group By**, and then apply a **Region filter** to find out which regions are driving that increase.

<div style={{ display: 'flex', justifyContent: 'center', gap: '20px' }}>
  <img src="/img/costexplorer/csf-1.png" alt="Service and Region Filter Example" style={{ maxWidth: '45%', height: 'auto' }} />
  <img src="/img/costexplorer/csf-2.png" alt="Service and Region Filter Example" style={{ maxWidth: '45%', height: 'auto' }} />
</div>


Resulting view:

<div style={{ textAlign: 'center' }}>
  <img src="/img/costexplorer/cost-explorer-saved-reports.png" alt="Cost explorer saved reports view" />
</div>

---

### API Operation Example

If you suspect a cost spike is due to specific API operations, you can use the **API Operation filter**.

<div style={{ textAlign: 'center' }}>
  <img src="/img/costexplorer/cost-explorer-filter-applied.png" alt="Cost explorer with filters applied" />
</div>

Resulting breakdown:

<div style={{ textAlign: 'center' }}>
  <img src="/img/costexplorer/cost-explorer-report-details.png" alt="Cost explorer report detailed view" />
</div>

---

### Chart Types

Cost Explorer supports multiple visualizations:

- **Bar Charts**
- **Line Graphs**
- **Stacked Charts**

Choose the format that best fits your analysis needs.

<div style={{ textAlign: 'center' }}>
  <img src="/img/costexplorer/cost-explorer-detailed-view.png" alt="Cost explorer detailed view" />
</div>

<div style={{ textAlign: 'center' }}>
  <img src="/img/costexplorer/cost-explorer-service-breakdown.png" alt="Cost explorer service breakdown" />
</div>

<div style={{ textAlign: 'center' }}>
  <img src="/img/costexplorer/cost-explorer-account-breakdown.png" alt="Cost explorer account breakdown" />
</div>

---

### Tabular Cost View

Alongside charts, a detailed **tabular breakdown** is available, listing all services, costs by month, and totals. This helps with precise reporting and exporting.

<div style={{ textAlign: 'center' }}>
  <img src="/img/costexplorer/cost-explorer-monthly-trend.png" alt="Cost explorer monthly trend view" />
</div>

---



================================================
File: docs/lens/costbreakup/overview.md
================================================
---
sidebar_position: 1
title: Overview
---

# Cost Analysis

## Cost Explorer

The Cost Explorer dashboard is similar to what customers see on their AWS Console, but enhanced with additional filtering and resource-level detail.

---

### Key Features

- View **day-on-day** or **month-on-month** cost trends, down to the **resource level**.
- Apply multiple filters such as service, instance type, and account ID to refine analysis.
- Group results by parameters like service, instance type, or account ID for deeper insights into cost breakdowns across accounts.
- Export filtered and grouped data as an **XLSX workbook** for further offline analysis.

---

## Cost Explorer Saved Report

Customers can create and save reports with their selected filters and groupings, including:

- Date ranges
- Tags
- Specific services

Saved reports (e.g., costs for tagged resources over the last month) can be quickly accessed later without needing to reapply the same filters and groupings.

---




================================================
File: docs/lens/cur.md
================================================
---
sidebar_position: 3
title: Saved Reports
---

import React from 'react';

# Cost Explorer Saved Reports

The **Saved Reports** feature lets you preserve detailed cost analyses you've built using Cost Explorer so you can quickly revisit and share them with your team without needing to reconfigure filters or groupings.

This feature makes your cost analyses **repeatable**, **efficient**, and **collaborative**, helping teams stay aligned and make data-driven decisions faster.

---

### Key Features

- **Save Filtered Views**: Save any view with applied filters and groupings for future analysis.
- **Flexible Groupings**: Keep your configurations by Service, Tags, Resource, Instance Type, Account ID, etc.
- **Date Range Flexibility**: Support for custom, monthly, or multi-month time ranges.
- **Granular Filters**: Retain all advanced filters, including Service, Usage Type, Platform, API Operation, Purchase Option, and more.

---

### Example Use Cases

- Analyze monthly cost trends for specific regions.
- Track API-level costs to troubleshoot unexpected spikes.
- Share pre-configured cost views with finance or engineering teams.
- Maintain different chart types (bar, line, stacked) for different reporting needs.

---

### Example

<div style={{ textAlign: 'center' }}>
  <img src="/img/costexplorer/cost-explorer-report-overview.png" alt="Cost explorer report overview" />
</div>

---


================================================
File: docs/lens/faq.md
================================================
---
sidebar_position: 3
title: Container Cost Allocation
---

# Container Cost Allocation

The **Container Cost Allocation** dashboard in Cost Breakup provides deep visibility into containerized workloads running on **EKS**, **ECS**, and other orchestrated environments. It helps you analyze costs at granular levels by cluster, namespace, region, instance type, and more so you can manage container costs efficiently and optimize resource usage.

---

## Overview & Key Metrics

At the top of the dashboard, you’ll see high-level metrics showing:

- Total costs over the last 3 months with month-over-month trends.

<div style={{ textAlign: 'center' }}>
  <img src="/img/costbreakup/cca/container-cost-monthly-trend.png" alt="Container cost monthly trend showing cost over the last 3 months" />
</div>

- Total **CPU Cost** and **Memory Cost**, split into **Used** and **Unused**. This highlights potential optimization opportunities.

<div style={{ textAlign: 'center' }}>
  <img src="/img/costbreakup/cca/container-cpu-memory-cost-split.png" alt="Container CPU and Memory cost split between used and unused resources" />
</div>

- Number of **Clusters**, **Nodes**, and **Pods** (or Tasks for ECS).
- Actionable recommendations to further reduce container costs (e.g., by upgrading EKS versions).

<div style={{ textAlign: 'center' }}>
  <img src="/img/costbreakup/cca/container-cluster-metrics-recommendations.png" alt="Container metrics showing clusters, nodes, pods and cost recommendations" />
</div>

---

## Cluster and Namespace Views

### Cost by Cluster

Displays a stacked bar chart showing month-on-month costs distributed across clusters. Helps you understand which clusters are contributing most to the spend.

<div style={{ textAlign: 'center' }}>
  <img src="/img/costbreakup/cca/container-cost-by-cluster.png" alt="Cost breakdown by container clusters" />
</div>

### Cost by Namespace

Breaks down the cost further into Kubernetes namespaces, useful for identifying workloads or environments (e.g., dev, prod) with high costs.

<div style={{ textAlign: 'center' }}>
  <img src="/img/costbreakup/cca/container-cost-by-namespace.png" alt="Cost breakdown by Kubernetes namespaces" />
</div>

---

## Additional Views

### Cost by Region

Shows container costs split by AWS regions (e.g., Mumbai, Sao Paulo). Useful for regional optimization and understanding global footprint.

<div style={{ textAlign: 'center' }}>
  <img src="/img/costbreakup/cca/container-cost-by-region.png" alt="Container costs split by AWS regions" />
</div>

### Cost by Instance Type

Displays how much each instance type (e.g., c6i.2xlarge, c6a.8xlarge) contributes to overall container costs. Helps with right-sizing and purchase strategy.

<div style={{ textAlign: 'center' }}>
  <img src="/img/costbreakup/cca/container-cost-by-instance-type.png" alt="Container costs by instance types" />
</div>

### Cost by Purchase Type

Breaks down costs by On-Demand, Savings Plans, and Spot. This helps you analyze how much you are saving and where to optimize further.

<div style={{ textAlign: 'center' }}>
  <img src="/img/costbreakup/cca/container-cost-by-namespace.png" alt="Cost breakdown by Kubernetes namespaces" />
</div>

---

## Top 20 Resources Table

Below the charts, a detailed table lists the **Top 20 resources** contributing to container costs. This includes:

- Cluster Name, Namespace, Region
- Node Instance Type, Purchase Option
- Used CPU Cost & Memory Cost
- Unused CPU Cost & Memory Cost
- Total Cost per resource

This helps identify specific workloads or nodes that might be overspending.

<div style={{ textAlign: 'center' }}>
  <img src="/img/costbreakup/cca/container-top20-resources.png" alt="Top 20 container resources by cost" />
</div>

---

## ECS and Explorer Views

### ECS

Similar cost breakdown is available for ECS clusters and tasks, though data may vary depending on your environment. When there is no ECS data, the graphs and metrics appear empty.

<div style={{ textAlign: 'center' }}>
  <img src="/img/costbreakup/cca/container-ecs-cost-breakdown.png" alt="ECS clusters and tasks cost breakdown" />
</div>

### Explorer

The **Explorer** tab provides advanced grouping and filtering options. You can group costs by:

- Region
- Account ID
- Instance Type or Type Family
- Instance ID
- Purchase Type
- Cluster Name
- And more

You can also use detailed filters on the right side to drill down into specific clusters, instance types, or other dimensions. 

Time granularity options allow you to switch between **Daily** and **Monthly** views, and toggle between different chart styles (bar, stack, line).

<div style={{ textAlign: 'center' }}>
  <img src="/img/costbreakup/cca/container-explorer-view.png" alt="Container cost explorer view with grouping options" />
</div>

<div style={{ textAlign: 'center' }}>
  <img src="/img/costbreakup/cca/container-explorer-detailed-view.png" alt="Detailed container cost explorer view with filters" />
</div>

---

## Downloadable Report

All data tables and charts can be exported to Excel for deeper offline analysis and sharing with stakeholders.

---



================================================
File: docs/lens/hourlydashboard/dtdashboard.md
================================================
---
sidebar_position: 2
title: Data Transfer
---

# Data Transfer

The **Data Transfer** dashboard in Cost Breakup offers deep visibility into your data transfer spend patterns. It provides granular insights into transfer costs, types, services, regions, and individual resources, helping you optimize and manage cloud networking expenses.

---

## Overview & Key Metrics

At the top of the dashboard, you'll find key metrics showing **month-on-month data transfer costs**, including:

- Total cost for the last 3 months month

<div style={{ textAlign: 'center' }}>
  <img src="/img/costbreakup/dt/data-transfer-monthly-cost.png" alt="Data transfer monthly cost trend for the last 3 months" />
</div>

- Quick breakdown by service (e.g., **EC2**, **Managed Streaming for Apache Kafka**) and by type (e.g., **Inter AZ (Availability Zone)**, **Internet (Out)**, **Region to Region**)

<div style={{ textAlign: 'center' }}>
  <img src="/img/costbreakup/dt/data-transfer-service-type-breakdown.png" alt="Data transfer cost breakdown by service and type" />
</div>

- Actionable recommendation to optimize costs

<div style={{ textAlign: 'center' }}>
  <img src="/img/costbreakup/dt/data-transfer-cost-recommendations.png" alt="Data transfer cost optimization recommendations" />
</div>


### Transfer Types

- **Inter AZ** - Shows detailed cost trends of transfers between availability zones across different regions. Helps pinpoint which region is generating the highest inter-AZ costs.
- **Region to Region** - Displays transfers between specific AWS regions. A "To Region" filter allows you to select the target region and analyze which source regions contribute to those costs.
- **Internet Out** - Highlights costs incurred when data leaves AWS to the internet, broken down by region. Useful for analyzing external data delivery expenses.

---

## Graph Controls and Filters

On the right side of each graph, there is a dropdown menu to adjust **granularity** and **graph type**, allowing you to customize your analysis:

- **Graph Type**: Choose from **Bar**, **Stack**, or **Line** charts.
- **Granularity**: Switch between **Monthly** and **Daily** views.

Additionally, you can change the **time frame** of the data using the month selector at the top right, enabling historical trend analysis or focused short-term review.

<div style={{ display: 'flex', justifyContent: 'center', gap: '200px' }}>
  <img src="/img/costbreakup/dt/data-transfer-graph-options.png" alt="Data transfer graph control options" style={{ maxWidth: '45%', height: 'auto' }} />
  <img src="/img/costbreakup/dt/data-transfer-month-selector.png" alt="Data transfer month selection options" style={{ maxWidth: '45%', height: 'auto' }} />
</div>


---

## Account and Type Views

### Cost by Account

Shows month-wise bar charts of data transfer costs by account (e.g., Sentinel, Thunderstrike). Helps identify accounts incurring high transfer charges.

<div style={{ textAlign: 'center' }}>
  <img src="/img/costbreakup/dt/data-transfer-cost-by-account.png" alt="Data transfer costs by AWS account" />
</div>

### Cost by Type

Displays similar month-wise bar charts split by transfer type, allowing you to understand trends and changes over time.

<div style={{ textAlign: 'center' }}>
  <img src="/img/costbreakup/dt/data-transfer-cost-by-type.png" alt="Data transfer costs by transfer type" />
</div>

---

## Additional Views

### Cost by Service

A comprehensive bar chart breaking down data transfer costs across different AWS services over time. Examples include Elastic Compute Cloud (EC2), Elastic Load Balancing (ELB), Virtual Private Cloud (VPC), etc.

<div style={{ textAlign: 'center' }}>
  <img src="/img/costbreakup/dt/data-transfer-cost-by-service.png" alt="Data transfer costs across different AWS services" />
</div>

### Cost by Region

Displays data transfer costs grouped by AWS regions (e.g., Mumbai, Ohio, N. Virginia). This highlights regions with heavy outbound or inter-region data movement.

<div style={{ textAlign: 'center' }}>
  <img src="/img/costbreakup/dt/data-transfer-cost-by-region.png" alt="Data transfer costs grouped by AWS regions" />
</div>

---

## Combined Views

### Cost of Type by Service

Enables filtering by service (e.g., EC2, ELB, S3). Displays how different data transfer types contribute to costs within that service.

<div style={{ textAlign: 'center' }}>
  <img src="/img/costbreakup/dt/data-transfer-type-by-service.png" alt="Data transfer types cost contribution by service" />
</div>

### Cost of Service by Type

Allows filtering by transfer type (e.g., Inter AZ, Internet Out, Region to Region). Shows which services are using each transfer type the most.

<div style={{ textAlign: 'center' }}>
  <img src="/img/costbreakup/dt/data-transfer-service-by-type.png" alt="Data transfer services cost by transfer type" />
</div>

---


## Top 20 Resources

A summarized view showing top 20 resources contributing to data transfer costs for selected services (e.g., EC2, ELB, S3). For each resource, you can see:

- **Total cost**
- **Costs** and **quantities** (GB) by Inter AZ, Internet Out, and Region to Region

This quickly identifies the most impactful resources.

<div style={{ textAlign: 'center' }}>
  <img src="/img/costbreakup/dt/data-transfer-top20-resources.png" alt="Top 20 resources contributing to data transfer costs" />
</div>

---

### Detailed Resource Table

Below the top resources, a detailed table shows:

- **Account ID**, **Resource Name**, **Instance ID**, **Region**
- **Quantities** and **costs** for each transfer type (Inter AZ, Internet Out, Region to Region)
- **Total cost**

<div style={{ textAlign: 'center' }}>
  <img src="/img/costbreakup/dt/data-transfer-detailed-resources.png" alt="Detailed table of resources with data transfer costs" />
</div>

This enables precise analysis down to individual resources and supports data-driven optimization efforts.

### Downloadable Report

You can **export a detailed Excel sheet** that includes all resource-level data. This is useful for further offline analysis or sharing with other stakeholders.

---


================================================
File: docs/lens/hourlydashboard/ec2dashboard.md
================================================
---
title: FAQs
---

**Q: [Placeholder Question for Category 1]?**  
A: [Your answer goes here]

================================================
File: docs/lens/hourlydashboard/faq.md
================================================
---
sidebar_position: 4
title: Networking & Content Delivery
---

# Networking & Content Delivery

The **Networking & Content Delivery** dashboard in Cost Breakup provides a detailed breakdown of costs associated with AWS services like **API Gateway** and **CloudFront**. It helps you analyze request volumes and corresponding costs at a granular resource level.

---

## API Gateway and CloudFront Tabs

At the top, you can switch between **API Gateway** and **CloudFront** to analyze each service separately.

---

## Table View

This section presents a detailed table displaying costs and usage metrics for each resource. The columns include:

- **Account ID**: The AWS account associated with the resource.
- **Resource ID**: Unique identifier for each API Gateway or CloudFront resource.
- **Region**: AWS region where the resource is hosted (e.g., Asia Pacific - Mumbai).

#### Requests

- **Quantity (Requests)**: Total number of requests processed by the resource.
- **Cost**: Cost incurred for these requests.

#### HTTP Request

- **Quantity (Requests)**: Total HTTP requests (if applicable).
- **Cost**: Cost associated with HTTP requests.

#### Others

- **Cost**: Any additional miscellaneous costs not directly classified under requests or HTTP requests.

#### Total Cost

- Aggregated cost for each resource, combining requests, HTTP requests, and other components.

---

<div style={{ textAlign: 'center' }}>
  <img src="/img/costbreakup/network/networking-content-delivery-dashboard.png" alt="Networking and Content Delivery dashboard showing API Gateway and CloudFront costs" />
</div>

## Time Frame and Download

On the top-right, you can select the **month** to view historical data and trends. Additionally, there is an option to **download** the full dataset as an Excel report for offline analysis or sharing.

---


================================================
File: docs/lens/hourlydashboard/others.md
================================================
---
sidebar_position: 5
title: Other Dashboards
---

# Other Dashboards

In addition to the **Data Transfer**, **Container Cost Allocation**, and **Networking & Content Delivery** dashboards, we also offer several other **insightful dashboards** for a comprehensive view of your cloud costs. These dashboards allow you to break down and analyze spending across a wide range of AWS services.

---

## Available Dashboards

1. **Database**  
   Provides in-depth cost analysis for your database services, including costs by engine type, region, RI coverage in cost, etc.
  
2. **S3**  
   Track your **S3** storage costs, broken down by service type, storage class, region, operation, etc.

3. **Compute**  
   Gain visibility into the compute resource costs, analyzing by instance type, region, usage pattern (On-demand, Reserved, or Spot), cost type, cost by processor,etc.

4. **Instance Cost**  
   A detailed breakdown of costs for various AWS instance-based services like **EC2**, **RDS**, **ElastiCache**, **OpenSearch** and **Redshift**.

5. **Containers**  
   Cost analysis for containerized workloads and repository costs, covering **ECS**, **EKS** and **ECR** services.

6. **Storage**  
   Track your overall **storage** costs, including EFS, EBS, and other storage services in your AWS environment.

7. **CloudWatch**  
   View CloudWatch metrics and logs cost to optimize monitoring costs for various AWS services.

8. **Security**  
   Analyze and track the costs associated with security services such as **WAF**, and **GuardDuty**.

9. **Serverless**  
   Provides insights into serverless computing costs with breakdowns by **Lambda**, **SES**, and **SQS**.

10. **Analytics**  
   Track your spending for **AWS Kineses**.

11. **Migration & Transfer**  
   Track your spending for **AWS DMS**.

12. **Media Services**  
   This dashboard offers insights into the costs of media services like **MediaTailor**, **MediaConnect**, and **MediaLive**.

---

## Explore Additional Dashboards

Each of these dashboards offers specialized **granular insights** to help you understand how your resources are being used across AWS, ultimately allowing you to make **data-driven decisions** to optimize your cloud spending.

Explore these dashboards to dive deeper into your cloud infrastructure, break down your spending by service, and uncover opportunities for optimization.

---

> **Note**: Each of these sections can be accessed easily from the **Cost Breakup** sidebar in the menu. Simply click on the respective service to begin analyzing the detailed cost metrics and trends.

---



================================================
File: docs/lens/hourlydashboard/overview.md
================================================
---
sidebar_position: 1
title: Overview
---

# Cost Breakup

The Cost Breakup section provides **granular insights** into your services and the resources running in them, helping you deeply analyze your cloud spending.

---

## Data Transfer

- View **month-on-month trends** of data transfer costs by account, type, service, and region.
- Visualize **resource-wise data transfer charges**, showing individual resources and the types of charges they incur.
- Includes a top 20 resources view for services like EC2, S3, and more.

---

## S3

- Similar to Data Transfer, the S3 dashboard provides **month-on-month trends** by account, region, operation, and usage type.
- Highlights **top buckets** by storage cost and operation cost for precise breakdowns.

---

## Compute

- The Compute dashboard shows **month-on-month trends** by account, region, instance type, and more.
- Costs can be analyzed based on different cost types: **unblended**, **amortized**, and **on-demand equivalent (ODE)**.

---

## Additional Dashboards

Beyond these, the Cost Breakup section offers detailed dashboards for:

- Instance costs
- Containers
- Storage
- And many more

---

The Cost Breakup section empowers teams to understand cost drivers at a fine-grained level, supporting data-driven optimizations and better budgeting.


================================================
File: docs/lens/hourlydashboard/savedreports.md
================================================
---
sidebar_position: 1
title: Cost and Usage Reports
---

# Cost and Usage Report

You can generate **Cost and Usage Reports (CUR)** to gain deeper insights into your AWS spending.

The Cost and Usage Report feature ensures secure and centralized access to detailed billing and usage data, supporting advanced analytics and informed financial planning.

---

### Key Features

- **Granularity Options**: Reports can be configured to be generated at different granularities, such as **Hourly**, **Daily**, or **Monthly**.

<div style={{ textAlign: 'center' }}>
  <img src="/img/cur/cur-tagging-options.png" alt="CUR tagging options" />
</div>

<br/><br/>
- **Multiple Export Types**: You can choose between standard data export types or utilize advanced formats like **Legacy CUR Export** to support different use cases and integrations.

<div style={{ textAlign: 'center' }}>
  <img src="/img/cur/cur-report-types.png" alt="CUR report types" />
</div>
<br/><br/>
- **S3 Integration**: You can specify a **destination S3 bucket** along with the required configurations for storing your reports.

<div style={{ textAlign: 'center' }}>
  <img src="/img/cur/cur-s3-configuration.png" alt="CUR S3 bucket configuration" />
</div>

---


### Managing Report Configuration

You can create, delete, or edit reports directly from the dashboard. **Bucket Policy**: Each report has an associated bucket policy to control access permissions for reading or modifying the reports.

<div style={{ textAlign: 'center' }}>
  <img src="/img/cur/cur-dashboard-view.png" alt="CUR dashboard overview" />
</div>

---


================================================
File: docs/lens/intro.md
================================================
---
title: FAQs
---

**Q: What is the difference between the CloudKeeper bill and AWS Cost Explorer?**  
A: We go aggressive on reservations on the customer's behalf. The customer has the flexibility to run on-demand, whereas we bear the risk to utilize those reservations. Also, the reservation charges get deducted from our main account, but the reservations are applied to the customer accounts. This is why the costs appear lower in Cost Explorer.

**Q: Where can I see the reservations that I bought?**  
A: You can view the reservations and SPs on the Reservations Dashboard in Lens itself. If your contract allows buying reservations, you can also buy new reservations from the CloudKeeper Lens console itself. We recommend you get in touch with us at support@cloudkeeper.com to get recommendations related to new RIs and SPs.

**Q: Where can I see the support charges in my invoice?**  
A: 


================================================
File: docs/lens/notifications/budgetalerts.md
================================================
---
sidebar_position: 3
title: Data Transfer
---

import React from 'react';

# Data Transfer Hourly Dashboard

The Data Transfer Hourly Dashboard provides a **detailed, hour-by-hour view** of your data transfer costs and usage trends. It helps you analyze **per-day cost fluctuations**, identify **peak periods**, and find opportunities for cost optimization.

The Dashboard empowers you to track **fine-grained cost patterns**, monitor data movement trends, and identify optimization opportunities. By leveraging these insights, your teams can reduce unnecessary transfers and achieve better cost efficiency.

---

### Overview and Filters

At the top, you can group data transfer costs by:
- **Service**
- **Region**
- **Type**

You can also toggle between **Cost** and **Quantity** views, depending on whether you want to analyze dollars spent or actual data transferred.

<div style={{ textAlign: 'center' }}>
  <img src="/img/hourlydashboard/hourly-data-transfer-overview.png" alt="Hourly data transfer dashboard overview" />
</div>

---

### Cost Metrics

- **Baseline Spend**: $45,133 — the lowest possible cost calculated using minimal hourly rates.
- **Total Spend**: $163,123 — actual spend for the selected period.
- **Baseline vs Total**: 27.67% — reveals the efficiency of current usage compared to the theoretical minimum.

These metrics help you assess efficiency and identify areas with high potential for savings.

---

### Heatmap Insights

The heatmap offers a **visual representation** of hourly cost trends throughout the month.

- Highlights **peak transfer hours** and low-cost periods.
- Color intensity indicates higher costs or higher transfer volumes.
- Helps understand workloads, migrations, or periodic spikes.

<div style={{ textAlign: 'center' }}>
  <img src="/img/hourlydashboard/hourly-data-transfer-trend.png" alt="Hourly data transfer trend" />
</div>

---

### Detailed Hourly View

Below the heatmap, a detailed hourly cost grid helps you drill down further to see precise spend patterns.

- Spot unexpected spikes in certain hours.
- Identify consistent baseline activities.

<div style={{ textAlign: 'center' }}>
  <img src="/img/hourlydashboard/hourly-data-transfer-detailed.png" alt="Hourly data transfer detailed view" />
</div>

---

### Save and Load Reports

You can **apply specific filters**, save these views as reports, and load them later for ongoing analysis or team reviews. This feature supports continuous cost monitoring and data-driven decision-making.

---

================================================
File: docs/lens/notifications/faq.md
================================================
---
sidebar_position: 2
title: EC2
---

import React from 'react';

# EC2 Hourly Dashboard

The EC2 Hourly Dashboard provides a **granular, hour-by-hour view** of your EC2 costs, enabling you to track **per-day trends**, understand **spending spikes**, and optimize your cloud workloads.

The Dashboard equips you with powerful insights to understand your **hourly compute spend patterns**, improve **forecasting**, and identify areas for **cost savings and optimization**. By leveraging these granular insights, your FinOps or engineering team can make smarter, data-driven decisions.

---

### Overview and Filters

At the top, you can analyze costs by:
- **Service**
- **Region**
- **Operating System**
- **Pricing Type**

Additionally, you can toggle between **Unblended**, **Amortized**, and **ODE** cost types to see different financial perspectives. The flexible **time range filter** helps you examine specific windows (e.g., 12-Jun-2025 to 11-Jul-2025).

### Cost Type Toggle Options

- **Unblended**: Shows the actual usage cost on the day it is charged no prorating or discounts applied. (Includes upfront charges like RIs or Savings Plans all on that specific day)
- **Amortized**: Spreads upfront reservation-related fees evenly across the billing period to show a more consistent daily effective cost.
- **ODE (On-Demand Equivalent)**: Displays what you would have paid under normal on-demand pricing, without any discount from Reserved Instances or Savings Plans.


<div style={{ textAlign: 'center' }}>
  <img src="/img/hourlydashboard/hourly-ec2-overview.png" alt="Hourly EC2 dashboard overview" />
</div>

---

### Cost Metrics

- **Baseline Spend**: Represents the minimum possible spend by assuming lowest hourly usage ($122,964).
- **Total Spend**: Your actual spend over the selected period ($272,794).
- **Baseline vs Total**: Percentage of baseline relative to total spend (45.08%).

These metrics help assess how efficient your current resource usage is and identify potential optimization opportunities.

---

### Heatmap Insights

The heatmap visualizes your **hourly cost trends**, highlighting:
- **Peak usage hours**, which might correspond to autoscaling or batch processing activities.
- **Idle or low-usage periods**, presenting opportunities for cost optimization.

You can use this data to analyze patterns, understand scaling behavior, and plan for better instance scheduling.

<div style={{ textAlign: 'center' }}>
  <img src="/img/hourlydashboard/hourly-ec2-trend.png" alt="Hourly EC2 usage trend" />
</div>

---

### Detailed Hourly View

The detailed heatmap grid shows **hour-by-hour costs per day**, allowing you to drill down to the most granular level of compute usage.

- Identify unexpected spikes and analyze causes.
- Spot consistent baseline workloads and right-size accordingly.

<div style={{ textAlign: 'center' }}>
  <img src="/img/hourlydashboard/hourly-ec2-detailed.png" alt="Hourly EC2 detailed view" />
</div>

---

### Save and Load Reports

You can **apply filters**, generate specific views, and **save reports** for future reference. Saved reports allow you to quickly revisit your analysis or share it with stakeholders without reapplying filters each time.

---


================================================
File: docs/lens/notifications/notifications.md
================================================
---
title: FAQs
---

**Q: [Placeholder Question for Category 1]?**  
A: [Your answer goes here]

================================================
File: docs/lens/notifications/overview.md
================================================
---
sidebar_position: 1
title: Overview
---

# Hourly Dashboard

The Hourly Dashboard provides an **hour-by-hour breakdown** of usage trends for various services such as Compute, S3, RDS, and more.

---

### Flexible Filtering

Users can apply filters such as:

- Service type
- Usage type
- Region
- Pricing type
- And more

These filters enable generation of **tailored insights** specific to business needs.

---

### Heatmap Visualization

- Features a **heatmap** that helps analyze patterns and trends effectively.
- In the heatmap, **darker colors indicate higher spends** during a specific hour, while **lighter colors signify lower spends**.
- Helps customers identify **peak usage times**, supporting informed decisions and future strategies.

---


================================================
File: docs/lens/preferences/faq.md
================================================
---
sidebar_position: 3
title: Others
---

import React from 'react';

# Other Hourly Dashboards

In addition to the EC2 and Data Transfer hourly dashboards, CloudKeeper Lens provides **granular hourly dashboards** for many other AWS services. These dashboards help you analyze cost trends, identify peak usage, and make optimization decisions at an hourly level.

---

### Available Hourly Dashboards

- **S3 (Simple Storage Service)**:  
  Analyze storage usage trends, understand request patterns, and optimize storage class configurations.

- **RDS (Relational Database Service)**:  
  Monitor database usage and costs per hour to optimize scaling and instance type choices.

- **ElastiCache**:  
  Evaluate caching workloads, see hourly cost breakdowns, and identify opportunities to tune configurations.

- **Redshift**:  
  Track data warehouse usage and query cost trends on an hourly basis to improve cost efficiency.

- **OpenSearch**:  
  Analyze indexing and search-related costs, monitor ingestion spikes, and optimize cluster sizing.

- **CloudFront**:  
  View hourly cost and data transfer patterns for content delivery, helping you adjust caching and edge configurations.

---

### Key Features

- **Per-hour breakdown**: Get detailed hourly cost and usage insights.
- **Service-level granularity**: Understand costs specific to each AWS service.
- **Group and filter**: Group by region, instance type, usage type, and more to tailor your analysis.
- **Heatmap visualization**: Spot peaks, spikes, and underutilization easily.

---

By leveraging these dashboards, you can better align your workloads with actual demand, identify anomalies in near real-time, and maximize the ROI of your AWS services.

---


================================================
File: docs/lens/preferences/mav.md
================================================
---
sidebar_position: 4
title: Saved Reports
---

import React from 'react';

# Hourly Dashboard Saved Reports

CloudKeeper Lens allows you to **save customized hourly dashboard reports** with your applied filters and groupings. This feature enables teams to revisit specific analyses and share them easily.


The **Hourly Dashboard Saved Reports** feature empowers you to create reusable, consistent, and shareable analyses across your AWS environments — helping your teams make data-driven decisions faster.

---

### Key Capabilities

- **Save filtered views**: After applying filters such as region, instance type, pricing type, or service, you can save the configuration for future reference.
- **Organize reports**: Saved reports are listed clearly, showing report name, date range, grouping, and filters applied.
- **Quick actions**: Easily reload a saved report or delete it when no longer needed.

---

### Example

<div style={{ textAlign: 'center' }}>
  <img src="/img/hourlydashboard/hourly-service-view.png" alt="Hourly service usage view" />
</div>

---

### Benefits

- **Consistency**: Ensure all team members analyze the same view.
- **Time savings**: Avoid reapplying filters repeatedly.
- **Better collaboration**: Share saved views with engineering, finance, and operations teams.

---


================================================
File: docs/lens/preferences/overview.md
================================================
---
sidebar_position: 1
title: Overview
---

# CloudKeeper Lens

## A Comprehensive AWS Cloud Cost Visibility & Recommendations Platform

Transform your AWS costs into actionable insights.  
From high-level trends to a granular view of your cloud spending and usage, gain the clarity you need for informed decision-making and smart recommendations that drive real impact to your bottom line.

---

### Why CloudKeeper Lens?

- **Resource-level cost visibility**, without needing access to your AWS account.
- **Unified view across multiple AWS accounts**, all in one place.
- A single platform to achieve **full cloud transparency** while driving long-term savings.

---

### Key Benefits

#### Monitor • Manage • Maximize

- Detailed billing summary and daily cost heatmaps.
- Account- and service-wise cost trends (monthly, weekly, daily).
- Average daily spend and accurate monthly forecasts.
- Advanced dashboards for critical services like EKS, databases, and data transfer.
- Hourly dashboards to spot variances and anomalies.
- Insights into Reserved Instances (RI) and Savings Plans coverage and utilization.

---

### Empowering Your FinOps Team

- Customized reports and proactive notifications.
- Purchase and renew Reserved Instances easily within the platform.
- Set cost thresholds and get smart anomaly detection alerts.
- Actionable cost optimization recommendations with measurable ROI.

---

CloudKeeper Lens gives you the power to **monitor, manage, and maximize** your AWS costs, enabling informed decisions and long-term savings, all in one unified platform.


================================================
File: docs/lens/preferences/password.md
================================================
---
title: FAQs
---

## Budget Alerts

**Q: Fixed budget alerts vs Relative budget alerts?**  
A: Fixed Budget Alerts – Trigger when spending exceeds a specific dollar amount you set for each budget period. Example: Alert if spend > $5,000 in a month.

Relative Budget Alerts – Trigger when spending exceeds a percentage change compared to a previous period, over a set number of days. Example: Alert if spend increases by more than 20% compared to the last 7 days.

================================================
File: docs/lens/preferences/tags.md
================================================
---
sidebar_position: 3
title: Budget Alerts
---

# Budget Alerts Overview

The **Budget Alerts** dashboard allows users to set alerts based on their budget thresholds, ensuring they are notified whenever costs exceed certain limits. This feature helps you keep control over your spending and avoid exceeding budgets set for various services or operations and get timely notifications on cost deviations, Reserved Instance utilization, and expiration alerts, as well as daily cost summaries.

---

### Budget Alert Configuration

- **Alert Frequency**: Choose between **Daily** or **Monthly** alerts depending on the frequency with which you want to be notified.
- **Email Notification Group(s)**: You can associate multiple **email groups** to receive notifications. 
- **Slack Channel(s)**: If you are using Slack for team communication, you can configure **Slack channels** to receive alerts.
- **Threshold**: Set the cost **threshold** for the alert to trigger.

---

### Cost Deviation Alerts

The **Cost Deviation Alerts** allow users to be notified when their AWS spending deviates significantly from the expected or forecasted budget. This feature helps users to identify and react to unexpected cost spikes early, preventing overspending.

To set up an **Cost Deviation Alerts**, you'll need to configure the following:

- **Budget Details**: This includes defining the Budget Name for the alert, and selecting the Budget Renewal Type (either Recurring Budget or Expiring Budget).
  - **Recurring Budget**: Renew on the first day of every monthly billing period, providing continuous budget tracking
  - **Expiring Budget**: Daily budgets will stop renewing after the selected expiration date, useful for temporary projects or time-limited initiatives

<div style={{ textAlign: 'center' }}>
  <img src="/img/notifications/notifications-budget-alert-config.png" alt="Budget alert configuration" />
</div>

<div style={{ textAlign: 'center' }}>
  <img src="/img/notifications/notifications-budget-threshold.png" alt="Budget threshold settings" />
</div>

- **Budget Filter**: This section lets you refine your alert based on specific AWS services or regions. This helps in narrowing down your alerts to monitor only the critical services or regions of your cloud infrastructure. For example, you can filter costs by **service** such as **EC2**, **S3**, or **Lambda**.

<div style={{ textAlign: 'center' }}>
  <img src="/img/notifications/notifications-budget-actions.png" alt="Budget alert actions" />
</div>
  
- **Budget Threshold**: You can set up budget thresholds using different methods to track your spending:
  - **Budget Method**:
    - **Fixed**: Enter a fixed amount to track each budget period, providing a consistent spending limit
    - **Relative**: Set how many past days to analyze and how much your budget can vary compared to the previous period, allowing for dynamic thresholds
  - **Days**: When using relative budgeting, specify the number of past days to analyze for establishing your baseline
  - **Relative percentage threshold**: Define the percentage variance allowed from your baseline spending before triggering alerts

<div style={{ textAlign: 'center' }}>
  <img src="/img/notifications/notifications-budget-email.png" alt="Budget alert email settings" />
</div>

<div style={{ textAlign: 'center' }}>
  <img src="/img/notifications/notifications-budget-summary.png" alt="Budget alert summary" />
</div>

- **Alert Recipients**: You can configure the Alert Recipients by adding email groups or Slack channels to receive notifications. 

#### Example

Below, we show an example configuration for **Cost Deviation Alerts** alerts

<div style={{ textAlign: 'center' }}>
  <img src="/img/notifications/notifications-budget-list.png" alt="Budget alerts list" />
</div>

<div style={{ textAlign: 'center' }}>
  <img src="/img/notifications/notifications-budget-details.png" alt="Budget alert detailed view" />
</div>

---

### RI Expiry Alerts

RI Expiry alerts notify you when your **Reserved Instances (RIs)** are nearing their expiration. This allows you to take action on renewing or purchasing new RIs before they expire.

#### Example

The following section shows a configuration screen where users can set up alerts for Reserved Instance expiry.

<div style={{ textAlign: 'center' }}>
  <img src="/img/notifications/notifications-ri-config.png" alt="Reserved Instance alert configuration" />
</div>

This screen allows you to define which email notification group or slack channel you want to send notification to.

#### Alert Frequency

The alert can be configured to notify you at the time of **expiration**, or **7**, **30**, or **60** days in advance.


<div style={{ textAlign: 'center' }}>
  <img src="/img/notifications/notifications-ri-alerts.png" alt="Reserved Instance alerts" />
</div>

---

### RI Utilization Alerts

This type of alert monitors the **utilization** of Reserved Instances. You will be alerted when the utilization of your RIs falls below a certain threshold, helping you optimize your reserved capacity. The utilization measurement helps identify if your reservations are unused or underutilized.

To set up an **RI Utilization Alert**, you'll need to configure the following:

- **Utilization Threshold (%)**: This is a percentage that defines the level of utilization you expect from your Reserved Instances. For example, if you set it to **80%**, you will be alerted if your RI utilization drops below 80%.
  
- **Service Type**: You can specify which AWS services the alert should monitor. This could be EC2 (Elastic Compute Cloud), RDS (Relational Database Service), ElastiCache, Redshift, or others. This helps ensure that you’re tracking the RI utilization of the relevant services.

- **Period**: Choose whether you want to be alerted on a **daily** or **monthly** basis, depending on how often you need to be notified about your utilization status.

#### Example

Below, we show an example configuration for **RI Utilization** alerts, allowing users to set thresholds for when RI utilization is low.

<div style={{ textAlign: 'center' }}>
  <img src="/img/notifications/notifications-ri-usage.png" alt="Reserved Instance usage alerts" />
</div>

---

### Daily Summary Report Alerts

These alerts provide a **daily cost summary** of your AWS spending, helping you stay informed about the daily breakdown of your cloud costs. You can configure this to be sent via email or Slack.

#### Example

Here is an example configuration screen for setting up **Daily Summary Report** alerts, which helps you track daily spending trends.

<div style={{ textAlign: 'center' }}>
  <img src="/img/notifications/notifications-budget-dashboard.png" alt="Budget alerts dashboard" />
</div>

The Daily Summary Report can be configured to be sent to specific **email recipients** or **Slack channels**.



================================================
File: docs/lens/preferences/users.md
================================================
---
sidebar_position: 2
title: Notification Groups
---

import React from 'react';

# Notification Groups

The **Notification Groups** feature enables you to configure **custom alert groups**. These groups can be linked to either **email** or **Slack** channels to ensure timely alerts are sent to the right recipients for any cost anomalies or threshold breaches.

It helps streamline and centralize alert management across teams. By configuring email and Slack notifications, you can ensure that the right team members are always aware of important cost trends, spikes, and breaches.

---

### **Email Notification Groups**

This section allows you to create **email-based notification groups**. Each group can have multiple recipients who will be notified when a threshold breach occurs.

To add an email notification group:

1. Click on the **Add Notification Group** button.
2. Enter the **Group name** and select the **Recipients**.
3. Once completed, click **Save** to confirm the changes.

Below is the example for adding an email notification group:

<div style={{ textAlign: 'center' }}>
  <img src="/img/notifications/notifications-settings.png" alt="Notification settings" />
</div>

---

### **Slack Notification Groups**

Slack integration allows you to send notifications directly to **Slack channels**. This feature enables teams to be notified of any anomalies directly in their communication workflow.

To add a Slack notification channel:

1. Click on **Add Slack Channel**.
2. Provide the **Channel ID** and the **OAuth Token**.
3. Follow the provided instructions in the integration guide.

Here’s an example of the Slack integration form:

<div style={{ textAlign: 'center' }}>
  <img src="/img/notifications/notifications-settings.png" alt="Notification settings" />
</div>

---

### **Managing Recipients**

Once the notification groups are set up, you can view and manage them on the **Notification Groups** page. Here, you can see all the existing notification groups along with their respective recipients.

For example, the **DevOps Admins** group includes recipients from the **DevOps** team, while the **Finance** group is set up for **financial monitoring**.

Below is an example of the **Notification Groups** overview:

<div style={{ textAlign: 'center' }}>
  <img src="/img/notifications/notifications-overview.png" alt="Notifications overview" />
</div>

---


================================================
File: docs/lens/recommendations.md
================================================
---
sidebar_position: 1
title: Overview
---

# Notification

The Notification dashboard enables customers to configure **custom alerts and notifications** to stay informed about unusual cost activities or threshold breaches.

---

### Notification Channels

#### Email

- Create **dedicated notification groups** and add recipients via email.
- Receive timely alerts directly in your inbox.

#### Slack Integration

- Configure Slack channels to receive alerts directly within your team’s communication workflows.
- Once integrated, notifications can be set up and managed through the Alerts page.

---

### Types of Alerts

#### Budget Alerts

- Set up **daily** or **monthly** alerts.
- **Daily alerts** can be configured to recur indefinitely or expire after a set time.
- **Budget Types**:
  - **Fixed Budget**: Predefined cost threshold.
  - **Relative Budget**: Dynamically adjusts using a percentage threshold based on spending trends over the last *n* days.
- **Scope Customization**: Apply budgets at the AWS service level or refine further using advanced filters.

#### Cost Deviation Alerts

- Get notified about deviations from expected costs, helping catch unexpected spikes early.

#### Reserved Instance (RI) Alerts

- **RI Expiry Alerts**: Get notified in advance when an RI is nearing expiration, so you can plan renewals or purchases proactively.
- **RI Utilization Alerts**: Monitor how effectively your RIs are being used. Alerts are triggered when utilization drops below a set threshold.

---

### Daily Summary Reports

Lens can deliver a **daily cost summary report** directly to configured Slack channels or email groups, ensuring continuous visibility into spending.

---


================================================
File: docs/lens/reports.md
================================================
---
sidebar_position: 1
title: Overview
---

# Preferences

The Preferences section allows customers to configure user permissions, manage multi-account visibility, and set up tags for better organization and tracking.

---

### User Permissions

Users can be assigned one of the following permission levels:

- **READ Only**: Can view data but cannot make changes.
- **ADMIN**: Has full access and can perform actions such as:
  - Configure and manage tags
  - Purchase Savings Plans or Reserved Instances
  - Set up notifications using the Lens Notification Dashboard
  - Add and manage other users

---

### Multi-Account View (MAV)

The **Multi-Account View (MAV)** provides visibility into all accounts linked to a customer, enabling centralized monitoring and management.

---

### Tags

Tags can be configured and applied across all accounts within an MAV, enabling better organization, cost allocation, and resource tracking.

---


================================================
File: docs/lens/reservations/coverage.md
================================================
---
title: FAQs
---

**Q: [Placeholder Question for Category 1]?**  
A: [Your answer goes here]

================================================
File: docs/lens/reservations/faq.md
================================================
---
sidebar_position: 2
title: Multi-Account View (MAV)
---

# Multi-Account View (MAV)

The **Multi-Account View (MAV)** page allows users to view and manage multiple AWS accounts from a single interface. This page enables centralized monitoring, cost allocation, and user management across linked AWS accounts, helping organizations optimize their cloud resources more efficiently. A **MAV (Multi-Account View)** is simply a **logical grouping of AWS accounts**, it provides a convenient way to manage and report on a specific set of accounts within CloudKeeper Offerings.

---

### MAV List

The **MAV List** displays all the MAVs in the system. Each MAV is associated with a group of accounts, allowing users to easily monitor and manage costs across different services and regions. You can quickly see how many accounts are assigned to each MAV and view the **assigned users** for each MAV.

#### Example

Below is an example of the **MAV List**, showing the different MAVs and their assigned accounts.

<div style={{ textAlign: 'center' }}>
  <img src="/img/preferences/preferences-mav-overview.png" alt="MAV overview" />
</div>

<div style={{ textAlign: 'center' }}>
  <img src="/img/preferences/preferences-mav-config.png" alt="MAV configuration" />
</div>


---

### Create New MAV

To create a new **MAV**, click on the **Add New MAV** button. This will allow you to define the **MAV Name** and select which **AWS account IDs** to add to the MAV. You can select multiple accounts to be grouped under the same MAV, which simplifies managing and viewing the accounts together.

Once an MAV is created, users with appropriate permissions can be assigned to that MAV to access the associated accounts.

#### Example

Here’s an example of the **Create New MAV** modal, where you can add account IDs to the MAV and name the MAV.

<div style={{ textAlign: 'center' }}>
  <img src="/img/preferences/preferences-mav-create.png" alt="Create MAV view" />
</div>

---

### Modify MAV

To modify an existing **MAV**, simply click on the **MAV Name** from the MAV list. This will open the MAV details, where you can view the current accounts and users associated with the MAV. You can add or remove accounts from the MAV by selecting and deselecting them in the **Choose Accounts IDs to Add to MAV** section.

Additionally, you can assign more **users** to the MAV from this section, giving them the appropriate access to monitor and manage the accounts within that MAV.


### MAV User Assignment

Each **MAV** can have multiple users assigned to it. When you add users to an MAV, they will have access to the accounts associated with that MAV. This helps in providing different teams with the visibility and permissions they need to monitor their cloud costs and resources effectively.

#### Example

In this image, you can see how users are assigned to a specific MAV, ensuring that the correct teams or individuals can access the relevant AWS accounts.

<div style={{ textAlign: 'center' }}>
  <img src="/img/preferences/preferences-mav-user-settings.png" alt="MAV user settings" />
</div>

---


================================================
File: docs/lens/reservations/overview.md
================================================
---
sidebar_position: 3
title: Password Management
---

# Password Management

The **Password Management** page allows users to change their password for secure access to their account. This section is essential for maintaining account security, ensuring that users can manage and update their login credentials when necessary.

---

### Change Password

To change your password, enter your **Previous Password**, then provide a **New Password** and confirm it by re-entering in the **Confirm Password** field. Make sure the new password meets security requirements to enhance your account's protection.

#### Example

Below is an example of the **Password Management** page, where users can enter their old and new passwords to securely update their credentials.

<div style={{ textAlign: 'center' }}>
  <img src="/img/preferences/preferences-password-settings.png" alt="Password settings" />
</div>

---


================================================
File: docs/lens/reservations/reservationsummary.md
================================================
---
sidebar_position: 4
title: Tags
---

# Tags Management

The **Tags Management** page enables you to create and centrally manage **cost allocation tags** across your AWS environment. Tags are an essential tool to logically group resources for improved cost allocation, tracking, and reporting. You gain clear insights into cost distribution, improve accountability, and enable better decision-making for your cloud operations.

---

### What are Tags?

Tags act as **keys** that exist on resources within your AWS accounts (MAVs). These keys (e.g., `environment`, `application`, `workload`) help you group and track resources more effectively.  

When you create a tag in Lens, you are essentially defining a tag **key** that already exists in your accounts. By adding multiple MAVs to a tag, Lens will scan those accounts and pull in all resources that contain this tag key.  

Once grouped, you can generate consolidated reports based on the **values** of that tag key (e.g., `dev`, `prod`, `PROD`, etc.).  

Any resources that do not contain this tag key will automatically appear under an **untagged** category in the report.

---

### Why Create Tags?

By using Tags Management, you can:

- Centrally define and manage tag keys across multiple accounts.
- Group resources from different accounts by tag values for unified visibility.
- Generate cross-account, consolidated **cost allocation reports** in the Reports section.
- Track and analyze resource usage and spending across all your AWS environments.

---

### Example Use Case

Imagine you have **five accounts**, each with various resources tagged using the key `environment`. In each individual account, you can see resources with `environment` tags and their values (e.g., `dev`, `prod`).  

However, if you want to see a **combined view of all resources across these five accounts** grouped by the `environment` tag, you would:

1. Create a new tag in Lens called `environment`.
2. Add all five MAVs to this tag.
3. Lens will then automatically group resources from all included accounts based on their `environment` tag values.
4. You can generate a consolidated report in the **Reports** section to view total costs and resource distribution for each environment (`dev`, `prod`, etc.).

> Resources without the `environment` tag key will be shown under the **untagged** section in the report.

---

### Create Tags

You can create tags to represent environments, teams, workloads, or other logical groupings. Tags can be associated with multiple **MAVs** (Multi-Account Views) so that they reflect resources across multiple accounts.

When creating a tag, provide a **Tag Name** (key) and an optional **Description** to explain its purpose. After creation, select the MAVs in which this tag key is used.

#### Example

Here is an example of the **Create Tag** modal, where users can input tag details and choose which MAVs to associate with the tag.

<div style={{ textAlign: 'center' }}>
  <img src="/img/preferences/preferences-tag-create.png" alt="Create tag view" />
</div>

---

### Manage Tags

You can edit existing tags at any time — update their name, description, or adjust the associated MAVs. This flexibility helps you maintain an accurate tagging strategy as your cloud footprint grows.

#### Example

Below is an example of the **Tags Management** screen, where you can view all tags and their associated MAVs.

<div style={{ textAlign: 'center' }}>
  <img src="/img/preferences/preferences-tag-overview.png" alt="Tag preferences overview" />
</div>

---

### Reports Integration

After creating tags and associating MAVs, you can head to the **Reports** section to generate reports for these tag groupings.  

Reports will show:

- Resources grouped by the **values** of your defined tag key (e.g., `dev`, `prod`).
- A dedicated **untagged** section for resources not containing the selected tag key.
- Costs and usage breakdowns for each group.

[Go to Reports page →](../reports)

---


================================================
File: docs/lens/reservations/utilization.md
================================================
---
sidebar_position: 1
title: Users
---

# Users Page

The **Users Page** in the **Preferences** section allows administrators to manage users, assign roles, and configure user access to different features within the platform.

---

### User List

The **User List** displays all users in the system, along with their details, including **Name**, **Email ID**, **Access Level** (e.g., Lens, Tuner), and the **Last Login** information. You can easily filter, search, or view the details of any user from this list.

#### Example

In the image below, you can see a sample **User List** with the respective user details.

<div style={{ textAlign: 'center' }}>
  <img src="/img/preferences/preferences-user-dashboard.png" alt="User preferences dashboard" />
</div>

---

### Add New User

To add a new user, click the **Add New User** button. This will open a modal where you can enter the **First Name**, **Last Name**, and **Email ID** of the user. You will also need to assign roles for the user under the **Lens** and **Tuner** categories.

Users can be assigned different levels of access:

- **Lens**
- **Tuner**

Additionally, you can assign the user to a specific **Multi-Account View (MAV)** to give them visibility into the associated accounts.

#### Example

Below is an example of the **Add New User** modal where you can input user details and roles.

<div style={{ display: 'flex', justifyContent: 'center', gap: '20px' }}>
  <img src="/img/preferences/adduser-1.png" alt="Add New User" style={{ maxWidth: '45%', height: 'auto' }} />
  <img src="/img/preferences/adduser-2.png" alt="Add New User" style={{ maxWidth: '45%', height: 'auto' }} />
</div>

---

### Edit User Access

Once a user is added, you can edit their access levels, update their email address, or change their role. The **Actions** column of the user list provides options to **edit** or **remove** users as needed.

---

### Delete User

If a user is no longer needed, you can remove them from the system by clicking the **Delete** button in the **Actions** column. Deleting a user removes their access to the platform and associated resources.

---


================================================
File: docs/lens/topfeatures.md
================================================
---
sidebar_position: 1
title: Recommendations
---

# Recommendations

The **Recommendations** dashboard acts as a **personal accountant**, offering actionable ways for you to save on infrastructure costs.

import Admonition from '@theme/Admonition';

<Admonition type="note" title="Note">
  These recommendations are based on CUR (Cost and Usage Report) data and best practices.
  They do not take into account real-time metrics, such as actual usage or dynamic resource allocation.
  Make sure to validate and analyze your actual resource utilization before applying any recommendations.
</Admonition>


---

### Cost Optimization Best Practices

- Provides **best practices** for cost optimization tailored to each customer's unique usage patterns.
- Lens suggests practical steps to reduce costs without compromising performance.

---

### Example Recommendations

#### Move to Lower Cost Instances

- Lens provides **service-wise, resource-level data** highlighting where customers can switch to lower-cost instances.
- These recommendations ensure cost savings while maintaining or even improving performance.
- Additional details are provided when clicking on **"More Info"**, explaining how the savings are calculated and the criteria used for this recommendation.

#### Remove Idle Network Resources

- Lens identifies **idle resources**, such as Load Balancers or NAT Gateways, recommending their removal to avoid unnecessary costs.
- Detailed recommendations include suggested actions, and users can see how much they can save by taking action.

---

### Additional Recommendations

Beyond the above examples, Lens offers further tailored recommendations designed to help customers continually optimize and control their AWS spending.

---

<div style={{ textAlign: 'center' }}>
  <img src="/img/recommendations/recommendations-overview-dashboard.png" alt="Recommendations overview dashboard" />
</div>

You can click on any recommendation to open a detailed view that explains the logic, savings breakdown, and specific actions you can take.

---

### How to get more details

When you click **More Info** on a specific recommendation, it provides a detailed breakdown, including:

1. **Savings Estimate**: Shows the potential savings after applying the recommendation (e.g., savings per month, year).
2. **Explanation & Actions**:  A description of what the recommendation entails, along with suggested actions you can take to apply it effectively.
3. **Criteria**: Explains the criteria used to generate the recommendation. For instance, in EC2 optimizations, it includes whether only On-Demand instances are considered and if the recommended instance type offers higher performance and lower cost.

---

#### Example: EC2 Instance Optimization

<div style={{ textAlign: 'center' }}>
  <img src="/img/recommendations/recommendations-ec2-overview.png" alt="Recommendations EC2" />
</div>
<br></br>
<div style={{ textAlign: 'center' }}>
  <img src="/img/recommendations/recommendations-ec2-moreinfo.png" alt="Recommendations EC2" />
</div>

This recommendation analyzes your cost and usage report for On-Demand EC2 instances that can be migrated to the latest generation instance types. Using the **current generation of EC2 instances** instead of the previous generation has multiple advantages, such as:

- Better hardware performance (faster CPUs)
- Increased memory and network throughput
- Better virtualization technology (HVM)
- Lower costs

The recommendations below are for EC2 instances that meet the following criteria:

- Only **On-Demand** instances are covered in the recommendations.
- Instances running continuously since the start of the current month are included, while instances used for only a few hours are excluded.
- The recommended instance types are of the same or better configuration than the current instance type but at a lower cost.

**Action(s) you need to take:**

- Review the mentioned workloads, analyze resource level utilization, and choose the right instance type.
- If your application is running on a legacy operating system or application server, you may need to rebuild the workload from scratch to leverage the latest generation instance types.

---

#### Example: S3 Storage Optimization

<div style={{ textAlign: 'center' }}>
  <img src="/img/recommendations/recommendations-s3-moreinfo.png" alt="Recommendations S3" />
</div>
<br></br>
<div style={{ textAlign: 'center' }}>
  <img src="/img/recommendations/recommendations-s3-moreinfoc.png" alt="Recommendations S3" />
</div>

In this recommendation, we analyze the S3 buckets that are only using **"Standard Storage Class"** from the CUR report. Here are some tips on optimizing S3 storage costs:

- **S3 Standard**: Used for frequently accessed data.
- **S3 Intelligent Tiering**: Helps automatically move storage costs to the most cost-effective access tier.
- **S3 Glacier**: Low-cost storage for archival data.
- **S3 Deep Archive**: Lowest-cost option for rarely accessed data.

**Action(s) you need to take:**

- Analyze your storage requirements and access patterns on each S3 bucket.
- Review the lifecycle transition considerations and move data to cheaper storage classes like **Glacier** or **Deep Archive** if appropriate.

---


================================================
File: docs/tuner/account/overview.md
================================================
---
sidebar_position: 1
title: Reports
---

# Reports

The **Reports** page provides a comprehensive way to analyze your AWS costs and resource usage across accounts, tags, and time periods. With this feature, you can generate consolidated tag-based reports for a unified view of your spending.

---

### Accessing Reports

All your configured tag-based reports can be accessed under the **Reports** section in the navigation panel.

<div style={{ textAlign: 'center' }}>
  <img src="/img/reports/reports-detailed-view.png" alt="Detailed reports view" />
</div>

### Key Features

- **Tag-Based Grouping**: Reports can be generated based on tags (cost allocation tags) that you have created and linked to various MAVs (Multi-Account Views). This allows you to see resources grouped by tag values such as `dev`, `prod`, etc., regardless of which account they are in.

[Go to Tags Page →](./preferences/tags.md)

- **Cross-Account Visibility**: Consolidates resource costs across multiple accounts that share the same tag keys, helping you understand total spend for specific environments, teams, or workloads.

- **Untagged Resources**: Resources that do not have the selected tag key are automatically grouped under **Untagged**, so you can identify and address missing tags.

---

### Monthly View

The **Monthly View** shows a breakdown of your costs for a selected month. You can expand each tag value to see service-level details.

<div style={{ textAlign: 'center' }}>
  <img src="/img/reports/reports-description.png" alt="Report description view" />
</div>

---

### Previous Months

The **Previous Months** view enables you to analyze cost trends across multiple months. This view provides a comparative breakdown to help track spending changes over time.

<div style={{ textAlign: 'center' }}>
  <img src="/img/reports/reports-previous-month.png" alt="Previous month reports" />
</div>

---

### Daily Breakup

The **Daily Breakup** view provides a day-by-day cost analysis within a selected month. This granularity allows you to identify sudden cost spikes or usage changes and take immediate action.

<div style={{ textAlign: 'center' }}>
  <img src="/img/reports/reports-daily-view.png" alt="Daily reports view" />
</div>

---

### Export Options

You can download:

- **Summary Sheet**: High-level summary of costs grouped by tags or accounts, useful for quick reviews and presentations.
- **Detailed Sheet**: Detailed breakdown including individual services and daily usage, ideal for in-depth analysis and audits.

These options make it easy to share reports with finance teams or other stakeholders.

---

================================================
File: docs/tuner/ckextension.md
================================================
---
sidebar_position: 2
title: Reservation Coverage
---

import React from 'react';

# Reservation Coverage

The **Reservation Coverage** page provides insights into how much of your usage is covered by Reserved Instances (RIs) compared to On-Demand usage. It helps users track the effectiveness of their Reserved Instance purchases and identify opportunities for cost optimization.

---

### Key Features of Coverage Page

- **Coverage Percentage**: This metric shows the percentage of your usage that is covered by Reserved Instances. Higher coverage indicates more cost savings as you are using Reserved Instances rather than paying for On-Demand instances.
- **Total On-Demand Cost**: Displays the total cost of On-Demand instances during the selected time period. This can help compare against the cost of RIs to gauge savings.
- **Average Coverage**: The average coverage over a specified period, helping you identify if your Reserved Instances are effectively utilized.

---

### Coverage Insights for Different Services

You can monitor the coverage for different services such as **EC2**, **RDS**, **ElastiCache**, and **OpenSearch**. The graph helps you identify how much of your usage for each service is covered by your Reserved Instances.

#### Example: EC2 Coverage

Here is an example of how EC2 coverage is tracked over time. You can see the **percentage of usage covered** by Reserved Instances on the graph. The insights help users track their usage and determine if more Reserved Instances are needed.

<div style={{ textAlign: 'center' }}>
  <img src="/img/reservations/reservations-ec2-coverage.png" alt="EC2 reservation coverage" />
</div>

---

### Coverage Details for Reserved Instances (RIs)

This section breaks down the coverage details for each instance type and region. It shows how much of the On-Demand usage is covered by Reserved Instances and the total On-Demand cost for each instance type.

- **Service Name**: The specific AWS service (e.g., EC2, Lambda).
- **Instance Family**: The type of instance (e.g., m5.large, t3.medium).
- **Tenancy**: Whether the instance is shared or dedicated.
- **Region**: The region where the instance is running (e.g., Asia Pacific, US East).
- **OD Covered By ESP**: The amount of On-Demand cost covered by Reserved Instances.
- **OD Covered By CSP**: The amount of On-Demand cost covered by Enterprise Savings Plan.
- **OD Covered By RI**: The amount of On-Demand cost covered by Customer Savings Plan.
- **Remaining OD**: The remaining On-Demand cost that is not covered by RIs.
- **Total OD**: The total On-Demand cost including both the covered and uncovered portions.
- **Covered Percentage**: The percentage of your usage that is covered by Reserved Instances.

This helps in tracking which instances are underutilized and which are optimized for savings.

<div style={{ textAlign: 'center' }}>
  <img src="/img/reservations/reservations-ec2-coverage-percent.png" alt="EC2 reservation coverage percentage" />
</div>

---

### Tracking Coverage for Different Services

The coverage percentage for **EC2**, **RDS**, **Redshift**, **ElastiCache**, and **OpenSearch** can be monitored separately. These insights allow you to see how well each service is covered and help you decide if additional Reserved Instances are needed for underutilized services.

#### Example: ElastiCache Coverage

You can track the coverage for services like **ElastiCache**, ensuring that your services are adequately covered by RIs and helping reduce On-Demand costs.

<div style={{ textAlign: 'center' }}>
  <img src="/img/reservations/reservations-elasticache-coverage.png" alt="ElastiCache reservation coverage" />
</div>

---

================================================
File: docs/tuner/faq.md
================================================
---
title: FAQs
---

**Q: [Placeholder Question for Category 1]?**  
A: [Your answer goes here]

================================================
File: docs/tuner/intro.md
================================================
---
sidebar_position: 1
title: Overview
---

# Reservation

## Summary

The **Summary** page provides an overview of your **complete inventory** of reservations, including both **active** and **expired reservations**.

- Depending on the reservation type, a **service-wise reservation tab** is available.
- For each service, you can view detailed information about **savings plans** or **reservations**, including:
  - Region
  - Instance type
  - Time to expiry
  - And more

This section helps you track your commitments and assess the effectiveness of your current reservation strategy.

---

## Coverage

The **Coverage** section highlights how much of your entire inventory is covered by reservations or savings plans for individual services.

- Helps teams understand **baseline usage** and make informed decisions about increasing reservation coverage.
- Displays coverage details for each instance family at the **hourly level** through a **table and grid view**.
- This provides insights into whether you have sufficient reservation coverage for your workloads or if additional reservations are required.

---

## Utilization

The **Utilization** section shows the **utilization rate** of the commitments you’ve made.

- Provides a **table and grid view** showing the utilization of each commitment in your inventory at the **hourly level**.
- This section helps identify underutilized reservations or savings plans.
- By clicking on the **account ID**, you can drill down to see the **utilization percentage** or **quantity-wise** details.

**Check the utilization of your reservations or savings plans** to ensure you're maximizing your commitments and identify any areas of underutilization.

---

================================================
File: docs/tuner/preferences/faq.md
================================================
---
sidebar_position: 1
title: Reservation Summary
---

import React from 'react';

# Reservation Summary

The **Reservation Summary** page provides an overview of all your active and expired Reserved Instances across AWS services like **EC2**, **RDS**, **ElastiCache**, **Redshift**, **OpenSearch**, and **Savings Plan**. It allows users to track and manage the reservations for compute resources in their cloud environment.

This page helps you to stay on top of reserved capacity, monitor expirations, and view pricing details such as **Hourly Price**, **Upfront Price**, and **Quantity**. The table view displays all key details and enables easy access to critical information about your reserved instances.

---

### Key Features of Reservation Summary

- **Account ID**: Identifies the AWS account associated with the reservation.
- **Reservation ID**: Unique ID assigned to each reservation.
- **Expiry (Days)**: The number of days remaining before the reservation expires.
- **Platform**: Platform for the reserved instances (e.g., Linux/UNIX, Windows).
- **Instance Type**: The type of EC2 instance (e.g., `c6a.large`, `m5a.large`).
- **Region**: The region where the reserved instance is deployed (e.g., Asia Pacific, Mumbai, US East).
- **Term**: The term for the reservation (e.g., 1-year, 3-year).
- **Quantity**: The number of reserved instances.
- **Hourly Price ($)**: The hourly cost of the reserved instance.
- **Upfront Price ($)**: The upfront cost associated with the reserved instance.
- **Offering Class**: Whether the reservation is standard or convertible.
- **Tenancy**: Indicates if the reservation is dedicated or shared.
- **Purchase Mechanism**: The method used to purchase the reservation (e.g., via CK).
- **State**: Indicates if the reservation is active or inactive.

This table allows you to track and manage reservations, identify instances close to expiration, and take necessary actions to renew or modify your reserved instances.

<div style={{ textAlign: 'center' }}>
  <img src="/img/reservations/reservations-summary-table.png" alt="Reservation summary table showing active and expired reservations" />
</div>

---

### Request New Reserved Instances

If your reservation is nearing expiry or you want to purchase more capacity, you can **Request Reserved Instances** directly from the page. The **Request Reserved Instances** section lets you search for different types of Reserved Instances based on instance class, deployment option, product description, and region.

This feature makes it simple to add or renew reserved instances, ensuring you maintain cost-effective usage of your cloud resources. 

<div style={{ textAlign: 'center' }}>
  <img src="/img/reservations/reservations-request-form.png" alt="Request new reserved instances form" />
</div>

---

### Active vs Expired Reservations

The Reservation Summary page distinguishes between **Active** and **Expired** reservations. Active reservations are those that are still valid, while expired reservations have already passed their term. It’s important to keep track of these to ensure that you are not losing out on benefits from your Reserved Instances.

- **Active Reservations**: Currently in use and are still valid.
- **Expired Reservations**: Past their expiration date. You may need to renew or purchase new instances.

Both active and expired reservations are listed, and you can take appropriate actions such as renewal or modification as needed.

---

================================================
File: docs/tuner/preferences/mav.md
================================================
---
sidebar_position: 3
title: Reservation Utilization
---

import React from 'react';

# Reservation Utilization

The **Reservation Utilization** page provides insights into how effectively your Reserved Instances (RIs) are being utilized. This helps identify underutilized Reserved Instances, allowing you to optimize your cloud spend by adjusting your Reserved Instance purchases or usage patterns.

---

### Key Features of Utilization Page

- **Utilization Percentage**: This metric shows the percentage of your Reserved Instances' capacity that is being used. A high utilization percentage indicates that you're making full use of your Reserved Instances, while a low percentage suggests that you're not fully utilizing your reservations.
- **Total On-Demand Cost**: This shows the total cost incurred from On-Demand instances. If the utilization is low, more On-Demand instances may be used, leading to higher costs.
- **Average Utilization**: This indicates the average utilization over a defined period. It gives you a quick overview of your Reserved Instances’ effectiveness over time.

---

### Utilization Insights for Different Services

The **Utilization** page tracks Reserved Instance usage across various services such as **EC2**, **RDS**, **Redshift**, **ElastiCache**, **OpenSearch**, and **Savings Plans**. The utilization percentage helps identify which services are making good use of Reserved Instances and which might require adjustments.

#### Example: EC2 Utilization

Here is an example showing EC2 utilization over time. The chart tracks **utilization percentage**, which helps users understand whether the Reserved Instances are being used efficiently.

<div style={{ textAlign: 'center' }}>
  <img src="/img/reservations/reservations-ec2-utilization.png" alt="EC2 reservation utilization" />
</div>

---

### Utilization Details for Reserved Instances (RIs)

This section shows the detailed breakdown of how Reserved Instances are being utilized across different services, regions, and instance families. It helps you identify the areas where you're getting the best value from your RIs and where adjustments might be needed.

- **Account ID**: The AWS account associated with the Reserved Instance.
- **Reservation ID**: A unique identifier for the Reserved Instance.
- **Region**: The region in which the Reserved Instance is deployed.
- **Operating System**: The operating system used by the Reserved Instance (e.g., Linux, Windows).
- **Instance Type**: The type of instance (e.g., t3.medium, m5.large).
- **Reserved Hours**: The total number of hours your Reserved Instance is available for.
- **Used Hours**: The actual number of hours the Reserved Instance was in use.
- **Unused Hours**: The hours that were available but not used, indicating underutilization.
- **Quantity**: The number of instances covered by the RI
- **Net Savings**: The savings from using Reserved Instances instead of On-Demand instances.
- **Used Percentage**: The percentage of the Reserved Instance that has been utilized.

This helps you track underutilized instances and make adjustments accordingly.

<div style={{ textAlign: 'center' }}>
  <img src="/img/reservations/reservations-ec2-utilization-coverage.png" alt="EC2 reservation utilization and coverage" />
</div>

---

### Tracking Utilization for Different Services

You can monitor the utilization of Reserved Instances for different services such as **EC2**, **RDS**, **Redshift**, **ElastiCache**, and **Savings Plans**. This provides a holistic view of your Reserved Instance usage across services and regions.

#### Example: SP Utilization

Tracking **SP** utilization helps ensure that your committed spend is fully leveraged, maximizing cost savings.

<div style={{ textAlign: 'center' }}>
  <img src="/img/reservations/reservations-savings-plan-coverage.png" alt="Savings Plan coverage" />
</div>

---


================================================
File: docs/tuner/preferences/overview.md
================================================
---
sidebar_position: 2
title: Top Offerings
---

# Top Offerings

CloudKeeper Lens provides a suite of powerful, exclusive features designed to give you unparalleled insight and control over your AWS costs. Here are some of our top offerings that provide deep, granular visibility and actionable recommendations you won't find anywhere else.

---

### **1. Deep-Dive Data Transfer Cost Analysis**

Uncover hidden data transfer costs with our dedicated dashboard that offers deep visibility into your networking spend. While many tools provide high-level data transfer metrics, Lens allows you to analyze costs at a granular level by service, region, transfer type, and even individual resources.

- **Granular Insights**: View month-on-month trends and resource-wise charges to see exactly which EC2 instances, S3 buckets, or load balancers are incurring costs.
- **Identify Hidden Spikes**: Pinpoint which regions or services are generating high inter-AZ or internet-out costs.
- **Optimize Networking Spend**: Use these detailed insights to make informed decisions about your architecture and reduce unnecessary expenses.

[**Learn More →**](./costbreakup/dt)

---

### **2. Granular Container Cost Allocation (CCA)**

For organizations running containerized workloads, our **Container Cost Allocation** dashboard provides unmatched visibility into EKS and ECS environments. Go beyond simple cluster-level costs and understand spending at the most granular levels.

- **Breakdown by Cluster & Namespace**: Analyze costs by individual clusters and Kubernetes namespaces to identify which teams or applications are driving spend.
- **Resource-Level Visibility**: See cost breakdowns by instance type, purchase type (On-Demand vs. Spot), and view CPU/Memory cost splits to find optimization opportunities.
- **Top Resource Identification**: A "Top 20 Resources" table quickly highlights the most expensive workloads, allowing for targeted optimization efforts.

[**Learn More →**](./costbreakup/cca)

---

### **3. Hour-by-Hour Cost & Usage Heatmaps**

Identify peak usage times and spot anomalies with our **Hourly Dashboards**. While most tools offer daily trends, Lens provides an hour-by-hour breakdown for services like Compute, S3, RDS, and Data Transfer, visualized in an intuitive heatmap.

- **Analyze Patterns**: Darker colors on the heatmap indicate higher spend, helping you visualize peak hours and baseline activity.
- **Informed Decision Making**: Use these hourly insights to plan for RI/SP purchases, understand scaling behavior, and optimize workloads that don't need to run 23/7.
- **Flexible Analysis**: View costs as Unblended, Amortized, or On-Demand Equivalent (ODE) for better financial clarity.

[**Learn More →**](./hourlydashboard/overview)

---

### **4. Advanced Cost Explorer with Granular Filtering**

Our **Cost Explorer** is the most powerful tool in Lens for deep-dive analysis. It mirrors the functionality of the AWS Cost Explorer but enhances it with more detailed filtering and resource-level granularity.

- **Powerful Grouping**: Group data by over a dozen dimensions, including Service, Region, Instance Type, Tags, API Operation, and Resource ID.
- **Advanced Filtering**: Isolate costs with precision by combining multiple filters to diagnose unexpected spikes or understand cost drivers.
- **Saved Reports**: Create and save your complex, filtered views to quickly revisit and share repeatable analyses with your team.

[**Learn More →**](./costanalysis/costexplorer)

---

### **5. Actionable, Data-Driven Recommendations**

Lens acts as your personal FinOps accountant by providing **actionable recommendations** to save on infrastructure costs. These suggestions are based on your actual usage data from the Cost and Usage Report (CUR).

- **Practical & Measurable**: Get tailored recommendations like moving to lower-cost instance types, removing idle network resources, or leveraging different S3 storage classes.
- **Detailed Explanations**: Each recommendation includes a "More Info" section that explains the logic, potential savings, and the specific actions you need to take.
- **Optimize with Confidence**: Validate our suggestions with your own analysis before applying them to ensure they align with your performance needs.

[**Learn More →**](./recommendations)

---

### **6. Consolidated Cross-Account Tag-Based Reporting**

For organizations managing multiple AWS accounts, our integrated **Tags Management** and **Reports** feature is indispensable. Centrally define cost allocation tags and generate consolidated reports that group resources across all your accounts.

- **Centralized Tag Management**: Define a tag key (e.g., `environment`) once and apply it to multiple MAVs (Multi-Account Views).
- **Unified Visibility**: Generate a single report that groups all resources from all selected accounts by tag value (e.g., `dev`, `prod`, `staging`).
- **Identify Untagged Resources**: Resources without the specified tag key are automatically grouped under an "Untagged" category, helping you improve your tagging hygiene.

[**Learn More →**](./preferences/tags)

---

================================================
File: docs/tuner/preferences/password.md
================================================
---
sidebar_position: 1
title: Accounts
---

import React from 'react';

# Accounts

The **Accounts** page provides a centralized view of all AWS accounts onboarded into CloudKeeper Tuner. It helps identify which accounts are linked and which are not, allowing users to manage feature access, onboarding status, and remediation settings from a single dashboard.

---

## Linked vs Unlinked Accounts

Each row in the table represents an AWS account with the following details:

- **Account ID and Name** (e.g., Thunderstrike, Sentinel)
- **Account Type** (e.g., Production or Non-Production)
- **Status**: Indicates if the account is verified and actively linked.
- **Auto Remediation Status**: Shows whether the auto remediation setup is updated.
- **Scheduler Toggle**: Allows enabling/disabling scheduler at the account level.
- **Access Type**: Indicates available features — Recommendations, Scheduler, SpotBot.
- **Actions**: Link or manage the account as needed.

<div style={{ textAlign: 'center' }}>
  <img src="/img/tuneraccounts/accounts-table.png" alt="Accounts table showing onboarded accounts, statuses, and feature access types" />
</div>

---

## Account Linking Status

At the top of the page or in other relevant modules, you’ll also see a quick summary showing how many accounts have been linked out of the total configured accounts.  
If not all accounts are linked, users can click on the **"Link Account"** button to complete onboarding.

<div style={{ textAlign: 'center' }}>
  <img src="/img/tuneraccounts/link-status-popup.png" alt="Account linking status indicator and action button" />
</div>

---

## Why Account Linking Matters

Only **linked and verified accounts** are eligible for:

- Receiving cost-saving recommendations
- Enabling auto-remediation features
- Utilizing advanced tools like Scheduler and SpotBot

---

Ensure all accounts are onboarded to unlock the full value of CloudKeeper Tuner.



================================================
File: docs/tuner/preferences/users.md
================================================
---
title: CK Extension (Tuner)
---

import React from 'react';

The **CloudKeeper Tuner Extension** is a powerful browser extension that integrates directly into the **AWS Console**.  
It enables users to view **Tuner-generated recommendations** without leaving the AWS environment, eliminating the need to switch between multiple platforms.

---

## Overview: CK Extension

One of the standout features of Tuner is the **CK Extension**.  
Designed for seamless integration, this extension displays key cost optimization insights directly within the AWS Console, providing:

- Quick access to recommendations without switching tabs.
- Integrated cost insights such as Potential Savings, Savings Achieved, and more.
- Direct actions through features like Auto Remediation and Snooze.

### Screenshot: CK Extension in AWS Console

<div style={{ textAlign: 'center' }}>
  <img src="/img/billingsummary/billing-summary-overview.png" alt="Billing summary overview dashboard" />
</div>

---

## Recommendations Dashboard

The **Recommendations Dashboard** offers a comprehensive overview of cost optimization opportunities. It provides:

- Projected Spend (Total Spend): Forecasts future AWS expenses.
- Potential Savings: Shows monthly savings achievable through optimizations.
- Savings Achieved: Displays the total savings already realized.
- Resources Scanned: Indicates the number of AWS resources analyzed.
- Total Recommendations: Number of actionable insights detected.

This dashboard helps identify inefficiencies, prioritize actions, and ensure better financial governance.

### Screenshot: Recommendations Dashboard

<div style={{ textAlign: 'center' }}>
  <img src="/img/billingsummary/billing-summary-overview.png" alt="Billing summary overview dashboard" />
</div>


---

## Recommendation Categories

Recommendations are divided into three main categories:

### Cleaner Recommendations
- Identifies unused or zombie resources (e.g., idle EC2 instances, unused ELBs).
- Offers quick savings through easy cleanup actions.

**Key Features:**
- Auto Remediation: Automatically remediate flagged resources directly from the dashboard.
- Snooze Option: Temporarily hide recommendations you want to defer.

---

### Over-Provisioned Recommendations
- Targets resources with low utilization, suggesting downsizing for efficiency.
- Example: An underutilized EC2 instance recommended to be resized from `r5a.8xlarge` to `r5a.4xlarge`.

**Additional Feature:**
- Snooze Option is also available here for deferred actions.

---

### Modernization Recommendations
- Flags outdated resources for upgrades to modern and cost-effective alternatives.
- Example: Suggesting an upgrade from `gp2` to `gp3` for EBS volumes.

---

## Scheduler Feature

Tuner’s Scheduler allows you to set start/stop schedules for non-production resources, ensuring they only run during required hours.  
This minimizes unnecessary spend by automating resource management.

- Configure schedules directly in the AWS Console.
- Customize timings per resource.
- Great for non-production environments.

---

## SpotBot

The SpotBot feature optimizes the usage of AWS Spot Instances, helping further reduce costs through automation and recommendations.

---

## Accounts Onboarding

To onboard your AWS accounts to Tuner:

1. Navigate to the Accounts Section and click Link Account.
2. Choose account type (Non-Prod or Prod).
3. Select the features to enable (Recommendations, Scheduler, SpotBot).
4. Choose onboarding method:
   - Automated: Deploy a CloudFormation template.
   - Manual: Follow the provided step-by-step guide.

Once onboarded, the system scans all resources (approximately 24 hours) and displays detailed insights per account.

---

## Preferences

Users can configure preferences to tailor the recommendations, scheduling, and SpotBot behavior as per their organization’s needs.

---

## CK Extension Detailed View

Within the AWS Console, you can view a quick overview of your savings and recommendations.  
By clicking the expand button, you can switch to the full Tuner view for more granular insights.

### Screenshot: Expanded Tuner View

<div style={{ textAlign: 'center' }}>
  <img src="/img/billingsummary/billing-summary-overview.png" alt="Billing summary overview dashboard" />
</div>



================================================
File: docs/tuner/recommendations/cleaner.md
================================================
---
title: FAQs
---

**Q: [Placeholder Question for Category 1]?**  
A: [Your answer goes here]

================================================
File: docs/tuner/recommendations/moredernization.md
================================================
---
sidebar_position: 1
title: Overview
---

# CloudKeeper Tuner

## Integrated AWS Usage Optimization with Near Real-Time Recommendations

CloudKeeper Tuner is an advanced AWS cost optimization tool that combines deep resource analysis, real-time recommendations, and automation to help organizations reduce costs and improve operational efficiency.  
With features like the CK Extension, Recommendations Dashboard, Scheduler, and SpotBot, Tuner empowers you to take proactive actions directly within your AWS environment.

---

### Why CloudKeeper Tuner?

- **Seamless integration with AWS Console** through the CK Extension.
- **Near Real-time recommendations** to identify and fix cost inefficiencies.
- **Automation features** like Auto Remediation, Scheduler, and SpotBot for hands-free optimization.
- **Actionable insights** for cleaner, modernized, and right-sized AWS environments.

---

### Key Benefits

#### Optimize • Automate • Save

- Integrated browser extension to view recommendations directly in AWS Console.
- Near Real-time cost insights: forecasted spend, potential savings, and achieved savings.
- Actionable recommendations across all AWS services.
- Auto-remediation capabilities to apply optimizations with a single click.
- Scheduling features to stop non-production resources during off-hours.
- Spot instance automation via SpotBot to further cut costs.

---

### CK Extension for AWS Console

- View all Tuner-generated recommendations directly within the AWS Console.
- Eliminate switching between platforms with an **embedded dashboard**.
- Quickly review, act, or snooze recommendations without leaving AWS.

---

### Recommendations Categories

- **Cleaner Recommendations**: Identify and remove unused or idle resources.
- **Over-Provisioned Recommendations**: Downsize underutilized resources to match actual usage.
- **Modernization Recommendations**: Upgrade outdated infrastructure for improved efficiency and cost savings.

---

### Empowering Your Cloud Team

- Gain instant visibility into cost-saving opportunities.
- Streamline actions with automation features like Auto Remediation.
- Configure preferences and policies that align with your organization’s requirements.
- Achieve measurable ROI through proactive, data-driven decisions.

---

CloudKeeper Tuner gives you the tools to **optimize, automate, and save** on AWS costs while simplifying cloud governance — all from a single integrated solution.


================================================
File: docs/tuner/recommendations/overprovisioned.md
================================================
---
title: FAQs
---

**Q: [Placeholder Question for Category 1]?**  
A: [Your answer goes here]

================================================
File: docs/tuner/recommendations/overview.md
================================================
---
sidebar_position: 2
title: Multi-Account View (MAV)
---

# Multi-Account View (MAV)

The **Multi-Account View (MAV)** page allows users to view and manage multiple AWS accounts from a single interface. This page enables centralized monitoring, cost allocation, and user management across linked AWS accounts, helping organizations optimize their cloud resources more efficiently. A **MAV (Multi-Account View)** is simply a **logical grouping of AWS accounts**, it provides a convenient way to manage and report on a specific set of accounts within CloudKeeper Offerings.

---

### MAV List

The **MAV List** displays all the MAVs in the system. Each MAV is associated with a group of accounts, allowing users to easily monitor and manage costs across different services and regions. You can quickly see how many accounts are assigned to each MAV and view the **assigned users** for each MAV.

#### Example

Below is an example of the **MAV List**, showing the different MAVs and their assigned accounts.

<div style={{ textAlign: 'center' }}>
  <img src="/img/preferences/preferences-mav-overview.png" alt="MAV overview" />
</div>

<div style={{ textAlign: 'center' }}>
  <img src="/img/preferences/preferences-mav-config.png" alt="MAV configuration" />
</div>


---

### Create New MAV

To create a new **MAV**, click on the **Add New MAV** button. This will allow you to define the **MAV Name** and select which **AWS account IDs** to add to the MAV. You can select multiple accounts to be grouped under the same MAV, which simplifies managing and viewing the accounts together.

Once an MAV is created, users with appropriate permissions can be assigned to that MAV to access the associated accounts.

#### Example

Here’s an example of the **Create New MAV** modal, where you can add account IDs to the MAV and name the MAV.

<div style={{ textAlign: 'center' }}>
  <img src="/img/preferences/preferences-mav-create.png" alt="Create MAV view" />
</div>

---

### Modify MAV

To modify an existing **MAV**, simply click on the **MAV Name** from the MAV list. This will open the MAV details, where you can view the current accounts and users associated with the MAV. You can add or remove accounts from the MAV by selecting and deselecting them in the **Choose Accounts IDs to Add to MAV** section.

Additionally, you can assign more **users** to the MAV from this section, giving them the appropriate access to monitor and manage the accounts within that MAV.


### MAV User Assignment

Each **MAV** can have multiple users assigned to it. When you add users to an MAV, they will have access to the accounts associated with that MAV. This helps in providing different teams with the visibility and permissions they need to monitor their cloud costs and resources effectively.

#### Example

In this image, you can see how users are assigned to a specific MAV, ensuring that the correct teams or individuals can access the relevant AWS accounts.

<div style={{ textAlign: 'center' }}>
  <img src="/img/preferences/preferences-mav-user-settings.png" alt="MAV user settings" />
</div>

---


================================================
File: docs/tuner/recommendations/remedyhistory.md
================================================
---
sidebar_position: 1
title: Overview
---

# Preferences

The Preferences section allows customers to configure user permissions, manage multi-account visibility, and set up tags for better organization and tracking.

---

### User Permissions

Users can be assigned one of the following permission levels:

- **READ Only**: Can view data but cannot make changes.
- **ADMIN**: Has full access and can perform actions such as:
  - Configure and manage tags
  - Purchase Savings Plans or Reserved Instances
  - Set up notifications using the Lens Notification Dashboard
  - Add and manage other users

---

### Multi-Account View (MAV)

The **Multi-Account View (MAV)** provides visibility into all accounts linked to a customer, enabling centralized monitoring and management.

---

The Preferences section ensures secure and flexible management of user access, accounts, and organizational tagging strategies across your AWS environment.


================================================
File: docs/tuner/recommendations/snooze.md
================================================
---
sidebar_position: 3
title: Password Management
---

# Password Management

The **Password Management** page allows users to change their password for secure access to their account. This section is essential for maintaining account security, ensuring that users can manage and update their login credentials when necessary.

---

### Change Password

To change your password, enter your **Previous Password**, then provide a **New Password** and confirm it by re-entering in the **Confirm Password** field. Make sure the new password meets security requirements to enhance your account's protection.

#### Example

Below is an example of the **Password Management** page, where users can enter their old and new passwords to securely update their credentials.

<div style={{ textAlign: 'center' }}>
  <img src="/img/preferences/preferences-password-settings.png" alt="Password settings" />
</div>

---


================================================
File: docs/tuner/scheduler/overview.md
================================================
---
sidebar_position: 2
title: Cleaner Recommendations
---

import React from 'react';

# Cleaner Recommendations

The **Cleaner Recommendations** section in CloudKeeper Tuner focuses on identifying **unused or idle AWS resources** that can be removed to achieve immediate cost savings.  
These recommendations typically include unused EC2 instances, idle load balancers, outdated EBS snapshots, and other resources that no longer contribute to workloads.

---

## Overview of Cleaner Recommendations

Cleaner recommendations are grouped by service (e.g., EC2, Elastic Load Balancing, Elastic Block Store).  
For each service, the dashboard displays:

- **Potential Savings** for removing idle resources.
- **Number of Recommendations** detected for the service.
- **Auto Remediation Option** to take immediate action.

<div style={{ textAlign: 'center' }}>
  <img src="/img/tunerrecommend/cleaner-overview.png" alt="Cleaner recommendations overview showing services with potential savings and recommendation counts" />
</div>

---

## EC2 Cleaner Recommendations

For EC2, the dashboard lists **instances that have been idle for extended periods**.  
Details provided include:

- **Account ID** and **Resource ID** for identification.
- **Region** where the resource is located.
- **Potential Savings** achievable by removing the resource.
- **Description** with usage history (e.g., "Instance stopped since 1 year, 4 days").
- **Action** (e.g., "Delete Stopped Instance and Attached EBS Volume").

You can either **Auto Remediate** to remove the resource immediately or **Snooze** to revisit it later.

<div style={{ textAlign: 'center' }}>
  <img src="/img/tunerrecommend/cleaner-ec2-details.png" alt="Detailed EC2 cleaner recommendations table with potential savings and actions" />
</div>

---

## Individual Recommendation Actions: Auto Remediation & Snooze

In addition to service-level actions, you can select **individual recommendations** for more granular control.  
For each selected recommendation, you can:

- **Auto Remediate**: Trigger the automatic deletion of unused instances and their attached resources (e.g., EBS volumes).  
  - A confirmation window appears, summarizing the resources selected and the savings potential.  
  - The window also highlights actions that will be performed during remediation (e.g., deleting instances with termination protection).  

<div style={{ textAlign: 'center' }}>
  <img src="/img/tunerrecommend/cleaner-auto-remediate-select.png" alt="Selecting an individual recommendation for auto remediation" />
</div>

- **Snooze**: Temporarily hide recommendations you are not ready to act on.  
  - You can specify a snooze duration (e.g., 7 days) and provide an optional reason.  
  - Snoozed items will move to the **Snoozed Recommendations** list for later review.  

<div style={{ textAlign: 'center' }}>
  <img src="/img/tunerrecommend/cleaner-snooze-selection.png" alt="Snoozing an individual EC2 cleaner recommendation" />
</div>

Additionally, hovering over the Auto Remediation button provides guidance:

<div style={{ textAlign: 'center' }}>
  <img src="/img/tunerrecommend/cleaner-auto-remediate-tooltip.png" alt="Tooltip explaining auto remediation works for one account at a time" />
</div>

---

## Elastic Load Balancer Cleaner Recommendations

The dashboard also detects idle or underused **Elastic Load Balancers** (ELBs).  
For example, load balancers without attached targets or no recent requests will be flagged.

- Recommendations include **decommissioning idle ELBs** to save costs.
- Actions are similar: **Auto Remediate** or **Snooze**.

<div style={{ textAlign: 'center' }}>
  <img src="/img/tunerrecommend/cleaner-elb-details.png" alt="Elastic Load Balancer cleaner recommendations table" />
</div>

---

## Key Features

- **Auto Remediation**: Quickly act on recommendations directly from the dashboard without navigating the AWS console.
- **Snooze Option**: Hide recommendations temporarily to review later in the **Snoozed List**.
- **Service-wise Breakdown**: Understand savings potential for each AWS service.

---

Cleaner Recommendations provide **the quickest path to immediate AWS cost reduction** by targeting resources that are no longer required.


================================================
File: docs/tuner/spotbot/overview.md
================================================
---
sidebar_position: 1
title: Users
---

# Users Page

The **Users Page** in the **Preferences** section allows administrators to manage users, assign roles, and configure user access to different features within the platform.

---

### User List

The **User List** displays all users in the system, along with their details, including **Name**, **Email ID**, **Access Level** (e.g., Lens, Tuner), and the **Last Login** information. You can easily filter, search, or view the details of any user from this list.

#### Example

In the image below, you can see a sample **User List** with the respective user details.

<div style={{ textAlign: 'center' }}>
  <img src="/img/preferences/preferences-user-dashboard.png" alt="User preferences dashboard" />
</div>

---

### Add New User

To add a new user, click the **Add New User** button. This will open a modal where you can enter the **First Name**, **Last Name**, and **Email ID** of the user. You will also need to assign roles for the user under the **Lens** and **Tuner** categories.

Users can be assigned different levels of access:

- **Lens**
- **Tuner**

Additionally, you can assign the user to a specific **Multi-Account View (MAV)** to give them visibility into the associated accounts.

#### Example

Below is an example of the **Add New User** modal where you can input user details and roles.

<div style={{ display: 'flex', justifyContent: 'center', gap: '20px' }}>
  <img src="/img/preferences/adduser-1.png" alt="Add New User" style={{ maxWidth: '45%', height: 'auto' }} />
  <img src="/img/preferences/adduser-2.png" alt="Add New User" style={{ maxWidth: '45%', height: 'auto' }} />
</div>

---

### Edit User Access

Once a user is added, you can edit their access levels, update their email address, or change their role. The **Actions** column of the user list provides options to **edit** or **remove** users as needed.

---

### Delete User

If a user is no longer needed, you can remove them from the system by clicking the **Delete** button in the **Actions** column. Deleting a user removes their access to the platform and associated resources.

---


================================================
File: docs/tuner/topfeatures.md
================================================
---
sidebar_position: 4
title: Modernization Recommendations
---

import React from 'react';

# Modernization Recommendations

The **Modernization Recommendations** section highlights **resources running on outdated or legacy infrastructure**.  
Upgrading these resources to modern alternatives improves performance, reliability, and cost efficiency.

---

## Overview of Modernization Recommendations

This section groups recommendations by service and displays:

- **Potential Savings** gained from upgrading outdated resources.
- **Number of Recommendations** available for modernization.
- Suggested **upgrade actions** (e.g., upgrading storage volumes, changing instance types).

<div style={{ textAlign: 'center' }}>
  <img src="/img/tunerrecommend/modernization-overview.png" alt="Modernization recommendations overview with potential savings and resource counts" />
</div>

---

## Example: RDS Modernization

For Amazon RDS, the dashboard identifies instances using older generation types or configurations.  
Recommendations may include:

- **Changing instance families** to newer, more cost-effective types.  
- Upgrading configurations for improved throughput and lower cost.  
- Viewing detailed metrics like CPU/Memory utilization to validate modernization needs.

Each recommendation shows:

- **Account ID**, **Resource ID**, and **Region**.
- **Potential Savings** achievable after modernization.
- **Action** to apply the upgrade (e.g., "Change Instance from db.m6g.8xlarge to db.r6g.4xlarge").

<div style={{ textAlign: 'center' }}>
  <img src="/img/tunerrecommend/modernization-rds-details.png" alt="Detailed modernization recommendations for RDS instances" />
</div>

---

## Other Modernization Examples

- **EBS Volumes**: Recommendations to upgrade from gp2 to gp3 for better performance and reduced costs.
- **Legacy Services**: Alerts for outdated services requiring upgrades to modern versions.

---

## Key Features

- **Actionable Upgrades**: Each recommendation provides clear actions to modernize infrastructure.
- **Auto Remediation**: Apply recommended upgrades directly from the dashboard.
- **Snooze Option**: Defer modernization actions and review them later in the Snoozed List.

---

Modernization Recommendations ensure your AWS infrastructure remains **efficient, cost-effective, and aligned with the latest best practices**.


================================================
File: docusaurus.config.js
================================================
---
sidebar_position: 3
title: Over-Provisioned Recommendations
---

import React from 'react';

# Over-Provisioned Recommendations

The **Over-Provisioned Recommendations** section identifies **resources that are larger than necessary** for their workloads.  
By right-sizing these resources, you can significantly reduce AWS costs while maintaining optimal performance.

---

## Overview of Over-Provisioned Recommendations

This section groups recommendations by service and highlights:

- **Potential Savings** from downsizing over-provisioned resources.
- **Number of Recommendations** for each service.
- Actions to **Downsize** instances or **Snooze** for later review.

<div style={{ textAlign: 'center' }}>
  <img src="/img/tunerrecommend/overprovisioned-overview.png" alt="Over-Provisioned recommendations overview with potential savings and resource counts" />
</div>

---

## EC2 Over-Provisioned Recommendations

For EC2 instances, CloudKeeper Tuner analyzes usage patterns over several months to detect underutilized resources.  
The dashboard shows:

- **Account ID**, **Resource ID**, and **Region** for easy identification.
- **CPU and Memory Utilization** statistics over the last several months.
- Suggested **downsizing actions** (e.g., "Downsize instance from r5a.8xlarge to r5a.4xlarge").
- Estimated **Potential Savings** from right-sizing.

<div style={{ textAlign: 'center' }}>
  <img src="/img/tunerrecommend/overprovisioned-ec2-details.png" alt="Detailed EC2 over-provisioned recommendations with usage stats and downsizing actions" />
</div>

---

## Additional Features

- **Auto Remediation**: Apply the suggested downsizing action directly.
- **Snooze Option**: Postpone actions on specific recommendations until they are ready to be implemented.
- **Detailed Insights**: Each recommendation includes a utilization history, ensuring decisions are based on actual usage patterns.

---

The Over-Provisioned Recommendations help ensure that your AWS resources are **right-sized to match their workload**, eliminating unnecessary expenses while keeping performance stable.


================================================
File: package.json
================================================
---
sidebar_position: 1
title: Recommendations Overview
---

import React from 'react';

# Recommendations Overview

The **Recommendations Dashboard** in CloudKeeper Tuner provides a centralized view of all cost optimization opportunities across your AWS environment.  
It helps identify inefficiencies, prioritize actions, and monitor savings with real-time data.

---

## Overview of Metrics

At the top of the dashboard, key financial and operational metrics are displayed to provide quick insights:

- **Total Spend**: Forecasted AWS spend based on current usage trends.  
- **Potential Savings**: Estimated monthly savings if all recommendations are implemented.  
- **Savings Achieved**: Total savings realized to date by acting on recommendations.  
- **Resources Scanned**: Number of AWS resources analyzed during the latest scan.  
- **Total Recommendations**: Total actionable recommendations available.

<div style={{ textAlign: 'center' }}>
  <img src="/img/tunerrecommend/recommend-overview-metrics.png" alt="Recommendations dashboard with total spend, potential savings, savings achieved, and resources scanned" />
</div>

---

## Recommendation Categories

Recommendations are grouped into **three main categories** for targeted cost optimization:

1. **Cleaner** – Identifies unused or idle resources that can be safely removed.  
2. **Over-Provisioned** – Flags resources that are oversized compared to their usage, suggesting right-sizing.  
3. **Modernization** – Highlights outdated resources and suggests upgrades to more cost-efficient alternatives.

<div style={{ textAlign: 'center' }}>
  <img src="/img/tunerrecommend/recommend-categories.png" alt="Tabs for Cleaner, Over-Provisioned, and Modernization recommendations" />
</div>

---

## Additional Features

The Recommendations Dashboard also includes powerful features to simplify optimization:

- **CSV Export** – Download the list of recommendations for offline review or reporting.  
- **Region Filter** – Filter recommendations based on specific AWS regions.  
- **Snooze List** – Temporarily hide recommendations you want to defer and review them later.  
- **Remediation History** – Track actions taken, their status, and savings achieved.

<div style={{ textAlign: 'center' }}>
  <img src="/img/tunerrecommend/recommend-filter-export.png" alt="Region filter and export options in recommendations dashboard" />
</div>

---

## Navigating Recommendations

From this dashboard, you can:
- Switch between **Cleaner**, **Over-Provisioned**, and **Modernization** tabs to focus on specific optimization areas.
- Apply actions such as **Auto Remediation** or snooze individual recommendations.
- View detailed breakdowns of recommendations at the resource level.

---

The Recommendations Overview gives you **a complete picture of cost-saving opportunities** in your AWS account, serving as the entry point to more detailed views of each category.


================================================
File: sidebars.js
================================================
---
sidebar_position: 6
title: Remediation History
---

import React from 'react';

# Remediation History

The **Remediation History** section provides a detailed log of all **Auto Remediation actions** performed through CloudKeeper Tuner.  
This helps track optimization activities, monitor success rates, and identify any issues encountered during execution.

---

## Overview of Remediation History

Each entry in the remediation history table includes:

- **Remediation ID** – Unique identifier for the remediation action.
- **Resource ID** – The AWS resource on which the action was applied.
- **Account ID** – The AWS account where the resource resides.
- **Region** – The AWS region of the resource.
- **Service** – The service (e.g., EC2, ELB, EBS) targeted by the remediation.
- **Type** – The type of action performed (e.g., Delete, Downsize, Upgrade).
- **Status** – Shows whether the action was successful or failed.
- **Savings Achieved** – The cost savings realized by applying the remediation.
- **Execution Time** – Timestamp of when the remediation was executed.
- **Messages** – Additional notes or error messages related to the action.

<div style={{ textAlign: 'center' }}>
  <img src="/img/tunerrecommend/remediation-history-table.png" alt="Auto remediation history table with status, savings, and execution details" />
</div>

---

## Status Indicators

The status column clearly reflects the outcome of each remediation:

- **Completed** – The action was successfully applied.
- **Error** – The remediation encountered an issue (details provided in the message column).

<div style={{ textAlign: 'center' }}>
  <img src="/img/tunerrecommend/remediation-status.png" alt="Remediation history with status indicators for completed and error actions" />
</div>

---

## Key Features

- **Audit Trail**: Complete visibility into all remediation actions taken.
- **Savings Tracking**: View cost savings achieved for each successful remediation.
- **Error Insights**: Detailed error messages help troubleshoot failed actions.

---

The Remediation History page ensures **full transparency** of optimization efforts, enabling teams to track actions and continuously improve their cost management strategy.


================================================
File: src/components/ValuePropsBanner/index.jsx
================================================
---
sidebar_position: 5
title: Snoozed Recommendations
---

import React from 'react';

# Snoozed Recommendations

The **Snoozed Recommendations** section displays all recommendations that have been temporarily deferred by the user.  
This feature allows you to **pause** actions on specific recommendations while keeping them for later review.

---

## Overview of Snoozed Recommendations

When you snooze a recommendation, it is removed from the active list and moved to the **Snoozed tab**.  
From this section, you can:

- View all snoozed recommendations.
- Review details such as the **resource**, **type of recommendation**, **reason for snooze**, and **date snoozed**.
- Choose to **unsnooze** a recommendation to make it active again.

<div style={{ textAlign: 'center' }}>
  <img src="/img/tunerrecommend/snoozed-overview.png" alt="Snoozed recommendations dashboard with list of deferred actions" />
</div>

If there are no snoozed items, the dashboard will display a **blank state** indicating that no recommendations have been deferred.

---

## Key Features

- **Centralized List**: All snoozed items are visible in one place.
- **Unsnooze Option**: Reactivate snoozed recommendations with a single click.
- **Deferred Review**: Ideal for recommendations requiring approval or further investigation.

---

The Snoozed Recommendations page ensures that **no optimization opportunity is lost**, even if actions are postponed temporarily.


================================================
File: src/components/ValuePropsBanner/index.module.css
================================================
---
sidebar_position: 1
title: Scheduler
---

import React from 'react';

# Scheduler

The **Scheduler** feature in CloudKeeper Tuner enables you to optimize AWS resource usage by controlling when non-production resources are powered on and off.  
This capability is crucial for reducing unnecessary cloud spend, especially in environments where 24/7 uptime is not required.

---

## What the Scheduler Dashboard Shows

The Scheduler dashboard presents an at-a-glance view of your resource-level coverage and cost impact.

### Key Metrics:

- **Scheduler Coverage**: Displays how many eligible resources have an active schedule applied out of the total scanned.
- **Total Spend**: The projected spend for the current month based on current usage trends.
- **Savings Achieved**: Shows both month-to-date and lifetime savings from scheduling.
- **Potential Savings**: Indicates additional savings that can be achieved by scheduling the remaining eligible resources.

<div style={{ textAlign: 'center' }}>
  <img src="/img/scheduler/overview.png" alt="Scheduler coverage, spend, savings, and potential savings for ECS resources" />
</div>

---

## Savings and Spend Analysis

Below the header metrics, a **bar graph** displays daily spend and savings data over time.  
This visual helps track trends and identify scheduling impact on your overall cloud bill.

<div style={{ textAlign: 'center' }}>
  <img src="/img/scheduler/graph-ecs.png" alt="Bar graph showing daily spend and savings trends for ECS scheduling" />
</div>

---

## Resource List & Scheduler Controls

The **resource table** shows all eligible instances for scheduling along with their account ID, region, and resource ID.

You can:

- Select one or multiple resources.
- Use the **Actions dropdown** to:
  - **Enable Scheduler**
  - **Disable Scheduler**
  - **Configure Scheduler**

<div style={{ textAlign: 'center' }}>
  <img src="/img/scheduler/resource-table-actions-1.png" alt="Resource table with scheduler actions like enable, disable, and configure" />
</div>

<div style={{ textAlign: 'center' }}>
  <img src="/img/scheduler/resource-table-actions-2.png" alt="Resource table with scheduler actions like enable, disable, and configure" />
</div>

---

## Scheduler Configuration Modal

Upon clicking “Configure,” a modal allows you to define:

- **Start/Stop times**
- **Timezone**
- **Day selection** (Every Day, Weekdays, Custom)

This provides full flexibility to schedule resources according to business hours or other operational requirements.

<div style={{ textAlign: 'center' }}>
  <img src="/img/scheduler/config-modal.png" alt="Scheduler configuration modal with time and day selection options" />
</div>

---

## Multi-Service Support

Scheduler also supports:

- **EC2 (Elastic Container Cloud)**
- **ASG (Auto Scaling Groups)**
- **RDS (Relational Database Service)**
- **Redshift**
- **SageMaker**

Each service has its own tab in the dashboard with the same layout:  
**Metrics, spend analysis, and configurable resource table**.

<div style={{ textAlign: 'center' }}>
  <img src="/img/scheduler/ec2-tab.png" alt="ECS tab showing scheduler coverage, spend, savings, and list of ECS services" />
</div>

---


================================================
File: src/css/custom.css
================================================
---
sidebar_position: 1
title: SpotBot
---

import React from 'react';

# SpotBot (ECS Fargate)

The **SpotBot** feature in CloudKeeper Tuner helps you automate cost savings on **ECS Fargate workloads** by intelligently enabling **Spot Instances** with a 1:2 ratio to On-Demand tasks.  
It provides visibility into current usage, potential savings, and allows you to enable/disable SpotBot at the cluster or task level.

---

## SpotBot Dashboard Overview

The SpotBot dashboard offers a high-level summary of SpotBot coverage, costs, and savings insights across your ECS environment:

- **Total Clusters**: Number of ECS clusters detected.
- **Spot Enabled Services**: How many services are running Spot Tasks.
- **Total Spend**: Current forecasted spend for ECS workloads.
- **Potential Savings**: Monthly savings you could realize by shifting to Spot.
- **Savings Achieved**: How much you’ve saved already, both this month and lifetime.

<div style={{ textAlign: 'center' }}>
  <img src="/img/spotbot/overview-dashboard.png" alt="SpotBot summary dashboard with metrics for clusters, services, spend, and savings" />
</div>

---

## Savings Insight

Below the metrics summary, the **Savings Insight** graph provides a daily breakdown of:

- **Savings Achieved** (Green)
- **Spot Spend** (Purple)
- **On-Demand Spend** (Blue)

This helps you track your usage trends and the impact of enabling SpotBot over time.

<div style={{ textAlign: 'center' }}>
  <img src="/img/spotbot/savings-insight.png" alt="Bar graph showing daily breakdown of savings, Spot, and On-Demand costs" />
</div>

---

## Cluster-Level Details

Each row in the SpotBot table displays:

- **Account ID**: The AWS account owning the cluster.
- **Cluster Name/ID**: ECS Cluster identifier.
- **Region**: AWS region.
- **Potential Savings**: Monthly savings opportunity for this cluster.
- **SpotBot Status**: Number of services within the cluster using Spot.

You can also filter clusters by region using the region dropdown.

<div style={{ textAlign: 'center' }}>
  <img src="/img/spotbot/cluster-level-summary.png" alt="SpotBot cluster-level summary showing account, region, and SpotBot coverage" />
</div>

---

## Service-Level Configuration

Expanding a cluster reveals all associated ECS services. For each service, you’ll see:

- **Service ID**
- **Total Tasks**
- **On-Demand vs Spot Task Count**
- **Potential Savings**
- **Enable/Disable SpotBot Toggle**

This lets you quickly switch individual services to use Spot where appropriate.

<div style={{ textAlign: 'center' }}>
  <img src="/img/spotbot/service-level-toggle.png" alt="Expanded view of ECS services with SpotBot toggle and task breakdown" />
</div>

---

## Key Benefits

- **Automated Cost Optimization**: SpotBot seamlessly switches eligible services to Spot instances.
- **Visibility**: Easily identify clusters and services with Spot savings potential.
- **Control**: Enable or disable SpotBot at any level — cluster or service.
- **Insights**: Visualize historical performance and savings data to guide decisions.

---



================================================
File: src/pages/coming-soon.jsx
================================================
---
sidebar_position: 2
title: Top Offerings
---

# Top Offerings

CloudKeeper Lens provides a suite of powerful, exclusive features designed to give you unparalleled insight and control over your AWS costs. Here are some of our top offerings that provide deep, granular visibility and actionable recommendations you won't find anywhere else.

---

### **1. Deep-Dive Data Transfer Cost Analysis**

Uncover hidden data transfer costs with our dedicated dashboard that offers deep visibility into your networking spend. [1, 11] While many tools provide high-level data transfer metrics, Lens allows you to analyze costs at a granular level — by service, region, transfer type, and even individual resources.

- **Granular Insights**: View month-on-month trends and resource-wise charges to see exactly which EC2 instances, S3 buckets, or load balancers are incurring costs.
- **Identify Hidden Spikes**: Pinpoint which regions or services are generating high inter-AZ or internet-out costs.
- **Optimize Networking Spend**: Use these detailed insights to make informed decisions about your architecture and reduce unnecessary expenses.

[**Learn More →**](/docs/lens/costbreakup/dt)

---

### **2. Granular Container Cost Allocation (CCA)**

For organizations running containerized workloads, our **Container Cost Allocation** dashboard provides unmatched visibility into EKS and ECS environments. Go beyond simple cluster-level costs and understand spending at the most granular levels.

- **Breakdown by Cluster & Namespace**: Analyze costs by individual clusters and Kubernetes namespaces to identify which teams or applications are driving spend.
- **Resource-Level Visibility**: See cost breakdowns by instance type, purchase type (On-Demand vs. Spot), and view CPU/Memory cost splits to find optimization opportunities.
- **Top Resource Identification**: A "Top 20 Resources" table quickly highlights the most expensive workloads, allowing for targeted optimization efforts.

[**Learn More →**](/docs/lens/costbreakup/cca)

---

### **3. Hour-by-Hour Cost & Usage Heatmaps**

Identify peak usage times and spot anomalies with our **Hourly Dashboards**. [2] While most tools offer daily trends, Lens provides an hour-by-hour breakdown for services like Compute, S3, RDS, and Data Transfer, visualized in an intuitive heatmap.

- **Analyze Patterns**: Darker colors on the heatmap indicate higher spend, helping you visualize peak hours and baseline activity.
- **Informed Decision Making**: Use these hourly insights to plan for RI/SP purchases, understand scaling behavior, and optimize workloads that don't need to run 23/7.
- **Flexible Analysis**: View costs as Unblended, Amortized, or On-Demand Equivalent (ODE) for better financial clarity.

[**Learn More →**](/docs/lens/hourlydashboard/overview)

---

### **4. Advanced Cost Explorer with Granular Filtering**

Our **Cost Explorer** is the most powerful tool in Lens for deep-dive analysis. [7] It mirrors the functionality of the AWS Cost Explorer but enhances it with more detailed filtering and resource-level granularity.

- **Powerful Grouping**: Group data by over a dozen dimensions, including Service, Region, Instance Type, Tags, API Operation, and Resource ID.
- **Advanced Filtering**: Isolate costs with precision by combining multiple filters to diagnose unexpected spikes or understand cost drivers.
- **Saved Reports**: Create and save your complex, filtered views to quickly revisit and share repeatable analyses with your team.

[**Learn More →**](/docs/lens/costanalysis/costexplorer)

---

### **5. Actionable, Data-Driven Recommendations**

Lens acts as your personal FinOps accountant by providing **actionable recommendations** to save on infrastructure costs. [5] These suggestions are based on your actual usage data from the Cost and Usage Report (CUR).

- **Practical & Measurable**: Get tailored recommendations like moving to lower-cost instance types, removing idle network resources, or leveraging different S3 storage classes.
- **Detailed Explanations**: Each recommendation includes a "More Info" section that explains the logic, potential savings, and the specific actions you need to take.
- **Optimize with Confidence**: Validate our suggestions with your own analysis before applying them to ensure they align with your performance needs.

[**Learn More →**](/docs/tuner/recommendations/overview)

---

### **6. Consolidated Cross-Account Tag-Based Reporting**

For organizations managing multiple AWS accounts, our integrated **Tags Management** and **Reports** feature is indispensable. Centrally define cost allocation tags and generate consolidated reports that group resources across all your accounts.

- **Centralized Tag Management**: Define a tag key (e.g., `environment`) once and apply it to multiple MAVs (Multi-Account Views).
- **Unified Visibility**: Generate a single report that groups all resources from all selected accounts by tag value (e.g., `dev`, `prod`, `staging`).
- **Identify Untagged Resources**: Resources without the specified tag key are automatically grouped under an "Untagged" category, helping you improve your tagging hygiene.

[**Learn More →**](/docs/lens/preferences/tags)

---


================================================
File: src/pages/coming-soon.module.css
================================================
// docusaurus.config.js

const dotenv = require('dotenv');
dotenv.config();

const enableTuner = process.env.ENABLE_TUNER === 'true';

const { themes } = require('prism-react-renderer');
const lightCodeTheme = themes.github;
const darkCodeTheme = themes.dracula;

const config = {
  title: 'Docs',
  tagline: 'All your costing information in one place',
  favicon: 'img/ck-favicon.png',
  url: 'https://your-cloudkeeper-docs-site.com',
  baseUrl: '/',
  onBrokenLinks: 'throw',
  onBrokenMarkdownLinks: 'warn',
  i18n: { defaultLocale: 'en', locales: ['en'] },

  // ❷ Expose to the client
  customFields: {
    enableTuner,
  },

  presets: [
    [
      'classic',
      {
        docs: { sidebarPath: require.resolve('./sidebars.js') },
        blog: false,
        theme: { customCss: require.resolve('./src/css/custom.css') },
      },
    ],
  ],

  themeConfig: {
    navbar: {
      title: 'Home',
      logo: {
        alt: 'Cloudkeeper Lens Logo',
        src: 'img/CloudKeeper_Logo-removebg-preview.png',
        href: '/',
      },
      items: [
        { to: '/lens', label: 'Lens', position: 'left' },
        // ❸ Navbar item obeys the flag
        { to: enableTuner ? '/tuner' : '/coming-soon', label: 'Tuner', position: 'left' },
      ],
    },
    docs: { sidebar: { hideable: true } },
    prism: { theme: lightCodeTheme, darkTheme: darkCodeTheme, additionalLanguages: ['yaml', 'python'] },
  },
};

module.exports = config;


================================================
File: src/pages/index.js
================================================
import React from "react";
import clsx from "clsx";
import useBaseUrl from "@docusaurus/useBaseUrl";
import styles from "./index.module.css";

export default function ValuePropsBanner({
  preText = "Your Comprehensive",
  highlightText = "Cloud Cost Optimization Partner",
  postText = "for",
  features = [
    {
      iconSrc: "/img/icons/24x7-support.png",
      iconAlt: "24x7 support",
      title: "Unlimited",
      subtitle: "Cloud Support",
    },
    {
      iconSrc: "/img/icons/cost-savings.png",
      iconAlt: "Savings",
      title: "Guaranteed",
      subtitle: "Cost Savings",
    },
    {
      iconSrc: "/img/icons/cloud-visibility.png",
      iconAlt: "Visibility",
      title: "Enhanced Cloud",
      subtitle: "Cost Visibility",
    },
  ],
  className,
}) {
  return (
    <section className={clsx(styles.wrapper, className)}>
      <h2 className={styles.headline}>
        <span className={styles.headPre}>{preText}&nbsp;</span>
        <span className={styles.headHighlight}>{highlightText}&nbsp;</span>
        <span className={styles.headPost}>{postText}</span>
      </h2>

      <div className={styles.features} role="list">
        {features.map((f, i) => (
          <div key={i} role="listitem" className={styles.featureItem}>
            {f.iconSrc ? (
              <img
                src={useBaseUrl(f.iconSrc)}
                alt={f.iconAlt ?? ""}
                className={styles.icon}
                loading="lazy"
              />
            ) : null}
            <div className={styles.featureText}>
              <div className={styles.featureTitle}>{f.title}</div>
              {f.subtitle ? (
                <div className={styles.featureSubtitle}>{f.subtitle}</div>
              ) : null}
            </div>
          </div>
        ))}
      </div>
    </section>
  );
}


================================================
File: src/pages/index.module.css
================================================
{
  "name": "lens-docs",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "docusaurus": "docusaurus",
    "start": "docusaurus start",
    "build": "docusaurus build",
    "swizzle": "docusaurus swizzle",
    "deploy": "docusaurus deploy",
    "clear": "docusaurus clear",
    "serve": "docusaurus serve",
    "write-translations": "docusaurus write-translations",
    "write-heading-ids": "docusaurus write-heading-ids"
  },
  "dependencies": {
    "@docusaurus/core": "3.8.1",
    "@docusaurus/preset-classic": "3.8.1",
    "@docusaurus/theme-search-algolia": "^3.8.1",
    "@fortawesome/free-brands-svg-icons": "^6.7.2",
    "@fortawesome/free-solid-svg-icons": "^6.7.2",
    "@fortawesome/react-fontawesome": "^0.2.2",
    "@mdx-js/react": "^3.0.0",
    "clsx": "^2.0.0",
    "dotenv": "^17.2.1",
    "prism-react-renderer": "^2.3.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-icons": "^5.5.0"
  },
  "devDependencies": {
    "@docusaurus/module-type-aliases": "3.8.1",
    "@docusaurus/types": "3.8.1"
  },
  "browserslist": {
    "production": [
      ">0.5%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 3 chrome version",
      "last 3 firefox version",
      "last 5 safari version"
    ]
  },
  "engines": {
    "node": ">=18.0"
  }
}


================================================
File: src/pages/lens.js
================================================
// sidebars.js

// One central feature flag (same as in docusaurus.config.js)
const enableTuner = process.env.ENABLE_TUNER === 'true';

/** @type {import('@docusaurus/plugin-content-docs').SidebarsConfig} */
const sidebars = {
  SidebarLens: [
    'lens/intro',
    'lens/topfeatures',
    {
      type: 'category',
      label: 'Billing Summary',
      items: [
        'lens/billingsummary/overview',
        'lens/billingsummary/costinsights',
        'lens/billingsummary/costbreakup',
        'lens/billingsummary/servicewise',
        'lens/billingsummary/recommendations',
        //'lens/billingsummary/faq',
      ],
    },
    {
      type: 'category',
      label: 'Billing Console',
      items: [
        'lens/billingconsole/overview',
        'lens/billingconsole/currentmonth',
        'lens/billingconsole/previousmonth',
        'lens/billingconsole/daily',
        //'lens/billingconsole/faq',
      ],
    },
    {
      type: 'category',
      label: 'Account-Wise Breakup',
      items: [
        'lens/accountwisebreakup/overview',
        'lens/accountwisebreakup/currentmonth',
        'lens/accountwisebreakup/previousmonth',
        'lens/accountwisebreakup/daily',
        //'lens/accountwisebreakup/faq',
      ],
    },
    {
      type: 'category',
      label: 'Hourly Dashboard',
      items: [
        'lens/hourlydashboard/overview',
        'lens/hourlydashboard/ec2dashboard',
        'lens/hourlydashboard/dtdashboard',
        'lens/hourlydashboard/others',
        'lens/hourlydashboard/savedreports',
        //'lens/hourlydashboard/faq',
      ],
    },
    {
      type: 'category',
      label: 'Cost Analysis',
      items: [
        'lens/costanalysis/overview',
        'lens/costanalysis/costexplorer',
        'lens/costanalysis/savedreports',
        //'lens/costanalysis/faq',
      ],
    },
    {
      type: 'category',
      label: 'Cost Breakup',
      items: [
        'lens/costbreakup/overview',
        'lens/costbreakup/dt',
        'lens/costbreakup/cca',
        'lens/costbreakup/nt',
        'lens/costbreakup/others',
        //'lens/costbreakup/faq',
      ],
    },
    'lens/reports',
    {
      type: 'category',
      label: 'Reservations',
      items: [
        'lens/reservations/overview',
        'lens/reservations/reservationsummary',
        'lens/reservations/coverage',
        'lens/reservations/utilization',
        //'lens/reservations/faq',
      ],
    },
    'lens/recommendations',
    {
      type: 'category',
      label: 'Notifications',
      items: [
        'lens/notifications/overview',
        'lens/notifications/notifications',
        'lens/notifications/budgetalerts',
        'lens/notifications/faq',
      ],
    },
    'lens/cur',
    {
      type: 'category',
      label: 'Preferences',
      items: [
        'lens/preferences/overview',
        'lens/preferences/users',
        'lens/preferences/mav',
        'lens/preferences/password',
        'lens/preferences/tags',
        //'lens/preferences/faq',
      ],
    },
    'lens/faq',
  ],

  SidebarTuner: enableTuner
    ? [
        'tuner/intro',
        {
          type: 'category',
          label: 'Recommendations',
          items: [
            'tuner/recommendations/overview',
            'tuner/recommendations/cleaner',
            'tuner/recommendations/overprovisioned',
            'tuner/recommendations/moredernization',
            'tuner/recommendations/snooze',
            'tuner/recommendations/remedyhistory',
          ],
        },
        'tuner/scheduler/overview',
        'tuner/spotbot/overview',
        'tuner/account/overview',
        {
          type: 'category',
          label: 'Preferences',
          items: [
            'tuner/preferences/overview',
            'tuner/preferences/users',
            'tuner/preferences/mav',
            'tuner/preferences/password',
            'tuner/preferences/faq',
          ],
        },
        'tuner/faq',
      ]
    : [
        {
          type: 'link',
          label: 'Coming Soon',
          href: '/coming-soon',
        },
      ],
};

module.exports = sidebars;


================================================
File: src/pages/tuner.js
================================================
.wrapper {
  max-width: 1100px;
  margin: 0 auto;
  padding: 24px 16px 8px;
}

.headline {
  margin: 0 0 20px;
  text-align: center;
  font-family: 'Metropolis', system-ui, -apple-system, Segoe UI, Roboto, sans-serif;
  font-weight: 800;
  line-height: 1.15;
  letter-spacing: 0.2px;
  font-size: clamp(28px, 4vw, 36px);
}

.headPre,
.headPost { color: var(--ck-text); }

.headHighlight { color: var(--ck-accent); font-weight: 800; }

/* Desktop grid */
.features {
  --divider: var(--ck-divider);
  position: relative;
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  align-items: center;
  gap: 24px;
  padding-top: 8px;
}

.features::before,
.features::after {
  content: "";
  position: absolute;
  top: 0;
  bottom: 0;
  width: 1px;
  background: var(--divider);
}
.features::before { left: calc(100% / 3); }
.features::after { left: calc(200% / 3); }

.featureItem {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 12px;
  min-height: 64px;
  text-align: center;
}

.icon {
  width: 36px;
  height: 36px;
  object-fit: contain;
  opacity: 0.9;
  flex-shrink: 0;
}

.featureText { display: grid; gap: 2px; }
.featureTitle {
  font-size: 14px;
  font-weight: 700;
  color: var(--ck-text);
  line-height: 1.2;
  white-space: nowrap;
}
.featureSubtitle {
  font-size: 13px;
  color: var(--ck-text-muted);
  line-height: 1.15;
}

/* Tablet/mobile */
@media (max-width: 996px) {
  .features {
    grid-template-columns: 1fr;
    gap: 0;
  }
  .features::before,
  .features::after { display: none; }
  .featureItem {
    width: min(560px, 92vw);
    margin: 0 auto;
    padding: 16px 0;
    position: relative;
  }
  .featureItem + .featureItem::before {
    content: "";
    position: absolute;
    top: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 80%;
    max-width: 520px;
    height: 1px;
    background: var(--divider);
  }
  .icon { width: 32px; height: 32px; }
  .featureTitle { font-size: 13px; }
  .featureSubtitle { font-size: 12px; }
}

@media (max-width: 480px) {
  .featureItem { padding: 14px 0; }
  .icon { width: 30px; height: 30px; }
}


================================================
File: src/theme/SearchBar/index.js
================================================
/*
================================================
FILE: src/css/custom.css
================================================
*/
:root {
  --ifm-color-primary: #254B62;
  --ifm-color-primary-dark: #214357;
  --ifm-color-primary-darker: #204053;
  --ifm-color-primary-darkest: #1a3544;
  --ifm-color-primary-light: #29536d;
  --ifm-color-primary-lighter: #2a5671;
  --ifm-color-primary-lightest: #2f617e;
}

[data-theme='dark'] {
  --ifm-color-primary: #52C5FF;
  --ifm-color-primary-dark: #33baff;
  --ifm-color-primary-darker: #23b4ff;
  --ifm-color-primary-darkest: #00a1f0;
  --ifm-color-primary-light: #71d0ff;
  --ifm-color-primary-lighter: #81d6ff;
  --ifm-color-primary-lightest: #aee5ff;
}

.footer--dark {
    --ifm-footer-background-color: #121212;
}

/* src/css/custom.css */

@import url('https://fonts.googleapis.com/css2?family=Metropolis:wght@600;700&family=Bitter:wght@500&family=Times+New+Roman&display=swap');

/* Add this rule to hide the Algolia logo in the search modal footer, Comment out to hide the logo */

/* .DocSearch-Logo {
  display: none;
} */

================================================
File: src/theme/SearchBar/styles.css
================================================
import React from "react";
import Layout from "@theme/Layout";
import Link from "@docusaurus/Link";
import useBaseUrl from "@docusaurus/useBaseUrl";
import styles from "./coming-soon.module.css";

export default function ComingSoon() {
  return (
    <Layout title="Coming Soon" description="Something awesome is on the way.">
      <main className={styles.wrap}>
        {/* Background ornaments */}
        <div className={styles.bgBlobOne} />
        <div className={styles.bgBlobTwo} />

        <section className={styles.card}>
          <img
            src={useBaseUrl('/img/coming-soon.png')}
            alt="Coming soon illustration"
            className={styles.illustration}
          />

          <h1 className={styles.title}>
            Something <span className={styles.accent}>awesome</span> is coming soon
          </h1>

          <p className={styles.subtitle}>
            We’re polishing the experience to bring you faster cloud savings
            and clearer cost visibility. Please check back later!
          </p>

          <div className={styles.actions}>
            <Link className={`${styles.btn} ${styles.primary}`} to="/">
              Back to Docs
            </Link>
          </div>
        </section>

        <footer className={styles.footer}>
          © {new Date().getFullYear()} CloudKeeper. All rights reserved.
        </footer>
      </main>
    </Layout>
  );
}


.wrap {
  position: relative;
  min-height: calc(100vh - var(--ifm-navbar-height, 0px));
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 48px 20px;
  background: linear-gradient(160deg, #4398d7 0%, #253e66 60%);
  overflow: hidden;
  color: #0f172a;
  font-family: 'Metropolis', system-ui, -apple-system, Segoe UI, Roboto, sans-serif;
}

.bgBlobOne,
.bgBlobTwo {
  position: absolute;
  width: 520px;
  height: 520px;
  border-radius: 50%;
  filter: blur(50px);
  opacity: 0.25;
  pointer-events: none;
  animation: float 12s ease-in-out infinite;
}

.bgBlobOne {
  background: #ffffff;
  top: -120px;
  right: -120px;
}

.bgBlobTwo {
  background: #d64794;
  bottom: -140px;
  left: -140px;
  animation-delay: 2s;
}

@keyframes float {
  0%, 100% { transform: translateY(0px) scale(1); }
  50% { transform: translateY(-12px) scale(1.02); }
}

.card {
  position: relative;
  z-index: 1;
  width: 100%;
  max-width: 720px;
  background: #ffffff;
  border-radius: 24px;
  padding: 40px 32px;
  box-shadow: 0 20px 60px rgba(17, 24, 39, 0.25);
  text-align: center;
  border: 1px solid rgba(37, 62, 102, 0.12);
}

.illustration {
  max-width: 280px;
  margin: 0 auto 20px;
  display: block;
}

.title {
  margin: 6px 0 8px;
  font-size: 40px;
  line-height: 1.15;
  font-weight: 800;
  color: #253e66;
}

.accent {
  color: #d64794;
}

.subtitle {
  margin: 0 auto 28px;
  max-width: 560px;
  font-size: 16px;
  line-height: 1.6;
  color: #475569;
}

.actions {
  display: flex;
  justify-content: center;
  margin-top: 4px;
}

.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 12px 20px;
  border-radius: 12px;
  text-decoration: none;
  font-weight: 600;
  font-size: 14px;
  transition: transform .2s ease, box-shadow .2s ease, background .2s ease;
}

.primary {
  background: linear-gradient(135deg, #4398d7, #2f6fb0);
  color: #fff;
  box-shadow: 0 8px 24px rgba(67, 152, 215, 0.35);
}
.primary:hover {
  transform: translateY(-2px);
  box-shadow: 0 12px 30px rgba(67, 152, 215, 0.45);
}

.footer {
  margin-top: 28px;
  color: rgba(255,255,255,0.9);
  font-size: 13px;
  text-align: center;
  z-index: 1;
}

@media (max-width: 768px) {
  .title { font-size: 32px; }
  .illustration { max-width: 220px; }
}


// src/pages/index.js
import React from 'react';
import Layout from '@theme/Layout';
import Link from '@docusaurus/Link';
import useBaseUrl from '@docusaurus/useBaseUrl';
import useDocusaurusContext from '@docusaurus/useDocusaurusContext';
import styles from './index.module.css';
import ValuePropsBanner from '@site/src/components/ValuePropsBanner';

export default function Home() {
  const { siteConfig } = useDocusaurusContext();
  // Falls back to false if not provided
  const enableTuner = Boolean(siteConfig?.customFields?.enableTuner);

  return (
    <Layout
      title="Home"
      description="Cloud cost clarity and optimization, all in one place."
    >
      <header className={styles.heroBanner}>
        <div className={styles.heroTextContainer}>
          <h1>Welcome To CloudKeeper Docs</h1>
        </div>
        <div className={styles.heroImageContainer}>
          <img
            src={useBaseUrl('/img/cloudkeeper-illustration.png')}
            alt="Illustration of a person using CloudKeeper Lens"
          />
        </div>
      </header>

      <main className={styles.mainContent}>
        <h2>Key Offerings</h2>
        <p>
          Ensure your cloud spend is generating value for your business, and
          eliminate wasted time for your teams.
        </p>

        <div className={styles.featureButtons}>
          <Link
            className={`${styles.card} ${styles.cardSmall} ${styles.cardLens}`}
            to="/lens"
          >
            <h3>Lens</h3>
          </Link>

          {/* Gate the Tuner entry point with the feature flag */}
          <Link
            className={`${styles.card} ${styles.cardSmall} ${styles.cardTuner}`}
            to={enableTuner ? '/tuner' : '/coming-soon'}
          >
            <h3>Tuner</h3>
          </Link>
        </div>

        <div className={styles.sectionGapLg} />

        <ValuePropsBanner
          preText="Your Comprehensive"
          highlightText="Cloud Cost Optimization Partner"
          postText="for"
        />
      </main>

      <footer className={styles.footer}>
        <div className={styles.footerContent}>
          <p>© {new Date().getFullYear()} CloudKeeper. All rights reserved.</p>
        </div>
      </footer>
    </Layout>
  );
}


import React from 'react';
import Layout from '@theme/Layout';
import Link from '@docusaurus/Link';
import useBaseUrl from '@docusaurus/useBaseUrl';
import styles from './index.module.css';

export default function Lens() {
  return (
    <Layout
      title="Lens"
      description="Cloud cost clarity and optimization, all in one place.">
      <header className={styles.heroBanner}>
        <div className={styles.heroTextContainer}>
          <h1>Welcome To CloudKeeper Lens</h1>
        </div>
        <div className={styles.heroImageContainer}>
          <img
            src={useBaseUrl('/img/cloudkeeper-illustration-removebg.png')}
            alt="Illustration of a person using CloudKeeper Lens"
          />
        </div>
      </header>
      <main className={styles.mainContent}>
        <h2>Key features</h2>
        <p>Ensure your cloud spend is generating value for your business, and eliminate wasted time for your teams.</p>
        <div className={styles.cardGrid}>
          <Link className={`${styles.card} ${styles.cardOverview}`} to="/docs/lens/intro">
            <h3>Overview</h3>
          </Link>
          <Link className={styles.card} to="/docs/lens/billingsummary/overview">
            <h3>Billing Summary</h3>
          </Link>
          <Link className={styles.card} to="/docs/lens/billingconsole/overview">
            <h3>Billing Console</h3>
          </Link>
          <Link className={styles.card} to="/docs/lens/accountwisebreakup/overview">
            <h3>Account-Wise Breakup</h3>
          </Link>
          <Link className={styles.card} to="/docs/lens/hourlydashboard/overview">
            <h3>Hourly Dashboard</h3>
          </Link>
          <Link className={styles.card} to="/docs/lens/costanalysis/overview">
            <h3>Cost Analysis</h3>
          </Link>
          <Link className={styles.card} to="/docs/lens/costbreakup/overview">
            <h3>Cost Breakup</h3>
          </Link>
          <Link className={styles.card} to="/docs/lens/reports">
            <h3>Reports</h3>
          </Link>
          <Link className={styles.card} to="/docs/lens/reservations/overview">
            <h3>Reservations</h3>
          </Link>
          <Link className={styles.card} to="/docs/lens/recommendations">
            <h3>Recommendations</h3>
          </Link>
          <Link className={styles.card} to="/docs/lens/cur">
            <h3>CUR</h3>
          </Link>
          <Link className={styles.card} to="/docs/lens/faq">
            <h3>FAQs</h3>          
          </Link>
        </div>
      </main>
    </Layout>
  );
}

// src/pages/tuner.js
import React from 'react';
import Layout from '@theme/Layout';
import Link from '@docusaurus/Link';
import useBaseUrl from '@docusaurus/useBaseUrl';
import useDocusaurusContext from '@docusaurus/useDocusaurusContext';
import { Redirect } from '@docusaurus/router';
import styles from './index.module.css';

export default function Tuner() {
  const { siteConfig } = useDocusaurusContext();
  const enableTuner = Boolean(siteConfig?.customFields?.enableTuner);

  // If the feature flag is off, push users to the Coming Soon page
  if (!enableTuner) {
    return <Redirect to="/coming-soon" />;
  }

  return (
    <Layout
      title="Tuner"
      description="Cloud cost clarity and optimization, all in one place."
    >
      <header className={styles.heroBanner}>
        <div className={styles.heroTextContainer}>
          <h1>Welcome To CloudKeeper Tuner</h1>
        </div>
        <div className={styles.heroImageContainer}>
          <img
            src={useBaseUrl('/img/cloudkeeper-illustration-removebg.png')}
            alt="Illustration of a person using CloudKeeper Tuner"
          />
        </div>
      </header>

      <main className={styles.mainContent}>
        <h2>Key features</h2>
        <p>
          Ensure your cloud spend is generating value for your business, and
          eliminate wasted time for your teams.
        </p>

        <div className={styles.cardGrid}>
          <Link className={`${styles.card} ${styles.cardOverview}`} to="/docs/tuner/intro">
            <h3>Overview</h3>
          </Link>

          <Link className={styles.card} to="/docs/tuner/recommendations/overview">
            <h3>Recommendations</h3>
          </Link>

          <Link className={styles.card} to="/docs/tuner/scheduler/overview">
            <h3>Scheduler</h3>
          </Link>

          <Link className={styles.card} to="/docs/tuner/spotbot/overview">
            <h3>SpotBot</h3>
          </Link>

          <Link className={styles.card} to="/docs/tuner/account/overview">
            <h3>Accounts</h3>
          </Link>

          <Link className={styles.card} to="/docs/tuner/preferences/overview">
            <h3>Preferences</h3>
          </Link>

          <div className={styles.empty}></div>

          <Link className={styles.card} to="/docs/tuner/faq">
            <h3>FAQs</h3>
          </Link>
        </div>
      </main>
    </Layout>
  );
}


/* src/pages/index.module.css */

/* ==== CloudKeeper theme tokens ==== */
:root {
  --ck-text: #111827;
  --ck-text-muted: #6b7280;
  --ck-heading: #253e66;
  --ck-accent: #d64794; /* pink highlight */
  --ck-card-bg: #ffffff;
  --ck-card-border: #e5e7eb;
  --ck-divider: #e5e7eb;
  --ck-page-bg: var(--ifm-background-color);
}

/* ==== Dark mode overrides ==== */
html[data-theme='dark'] {
  --ck-text: #e5e7eb;
  --ck-text-muted: #a3a3a3;
  --ck-heading: #e6edf3; /* lighter heading on dark */
  --ck-card-bg: #111418; /* near-UI dark */
  --ck-card-border: #2a2f36;
  --ck-divider: #2f3540;
  --ck-page-bg: var(--ifm-background-color);
}

:global(html, body) {
  height: 100%;
  margin: 0;
}

:global(#__docusaurus) {
  display: flex;
  flex-direction: column;
  min-height: 100%;
}

.mainContent {
  flex: 1; /* pushes footer down */
}

.footer {
  margin-top: auto; /* stick to bottom */
}

.heroBanner {
  display: flex;
  align-items: stretch;
  background-color: var(--ck-card-bg); /* Use variable for dark mode compatibility */
  width: 100%;
  min-height: 200px;
  position: relative;
}

.heroTextContainer {
  background-color: #4398d7; /* The primary blue from the image - kept for branding */
  color: white;
  flex-basis: 60%;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 2rem 4rem;
  position: relative;
  overflow: hidden;
  border-top-right-radius: 80px;
  border-bottom-right-radius: 80px;
}

/* Decorative circle from the image */
.heroTextContainer::before {
  content: '';
  position: absolute;
  width: 450px;
  height: 450px;
  background-color: #3884c1; /* A slightly darker, solid blue */
  border-radius: 50%;
  top: 50%;
  left: 0;
  transform: translate(-40%, -50%);
  z-index: 0;
}

.heroTextContainer h1 {
  font-family: 'Metropolis', sans-serif;
  font-weight: 700;
  font-size: 40px;
  line-height: 1.2;
  margin: 0;
  position: relative;
  z-index: 1;
  max-width: 450px;
}

.heroImageContainer {
  flex-basis: 45%;
  display: flex;
  align-items: flex-end;
  justify-content: center;
  padding: 1rem;
}

.heroImageContainer img {
  max-width: 100%;
  max-height: 350px;
  object-fit: contain;
}
/* --- END OF HERO STYLES --- */

.mainContent {
  max-width: 1200px;
  margin: 0 auto;
  padding: 60px 20px;
  font-family: 'Times New Roman', serif;
  background: var(--ck-page-bg); /* Use page background variable */
}

.mainContent h2 {
  font-size: 30px;
  font-weight: 600;
  color: var(--ck-heading); /* Use variable */
  margin-bottom: 1rem;
  text-align: center;
  font-family: 'Metropolis', sans-serif;
}

.mainContent > p {
  font-size: 20px;
  color: var(--ck-text-muted); /* Use variable */
  text-align: center;
  margin-bottom: 3rem;
  max-width: 600px;
  margin-left: auto;
  margin-right: auto;
  font-family: 'Times New Roman', serif;
}

.footer {
  background-color: #4398d7; /* same blue as heroTextContainer */
  padding: 5px 0;
  margin-top: 60px;
  text-align: center;
  color: white;
  font-family: 'Metropolis', sans-serif;
}

.footerContent {
  max-width: 1200px;
  margin: 0 auto;
  padding: 10px 20px;
  font-size: 16px;
  line-height: 1.5;
}

.empty {
  background: transparent;
}

.cardGrid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 24px;
  margin-top: 2rem;
  max-width: 1000px;
  margin-left: auto;
  margin-right: auto;
}

.sectionGapLg {
  height: 50px;
}

.card {
  background: var(--ck-card-bg); /* Use variable */
  border-radius: 20px;
  padding: 32px 24px;
  text-decoration: none;
  color: inherit;
  border: 1px solid var(--ck-card-border); /* Use variable */
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
  min-height: 120px;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  text-align: center;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 4px;
  background: linear-gradient(90deg, #253e66, #4398d7);
  transform: scaleX(0);
  transform-origin: left;
  transition: transform 0.3s ease;
}

.featureButtons {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 120px;
  margin-top: 2rem;
  margin-bottom: 2rem;
}

.featureButtons .cardSmall {
  width: 220px;
  padding: 12px 20px;
  min-height: 100px;
  text-align: center;
}

.cardSmall h3 {
  font-size: 1rem;
}

.card:hover::before {
  transform: scaleX(1);
}

.card:hover {
  transform: translateY(-4px);
  box-shadow: 0 12px 32px rgba(67, 152, 215, 0.15);
  border-color: var(--ck-accent); /* Use variable */
}

.card h3 {
  font-size: 1.4rem;
  font-weight: 600;
  color: var(--ck-heading); /* Use variable */
  margin: 0;
  font-family: 'Metropolis', sans-serif;
}

/* Icons (gradients are kept for branding) */
.card[href*="billingsummary"]::after,
.card[href*="billingconsole"]::after,
.card[href*="accountwisebreakup"]::after,
.card[href*="hourlydashboard"]::after,
.card[href*="costanalysis"]::after,
.card[href*="costbreakup"]::after,
.card[href*="reports"]::after,
.card[href*="reservations"]::after,
.card[href*="recommendations"]::after,
.card[href*="cur"]::after,
.card.cardOverview::after,
.card[href*="scheduler"]::after,
.card[href*="spotbot"]::after,
.card[href*="account"]::after,
.card[href*="preferences"]::after,
.card[href*="faq"]::after {
  content: '';
  display: block;
  width: 48px;
  height: 48px;
  margin: 0 auto 1rem;
  background: linear-gradient(135deg, #4398d7, var(--ck-accent));
  mask-size: contain;
  opacity: 0.8;
}

/* Specific icon masks */
.card[href*="billingsummary"]::after { mask: url("data:image/svg+xml,...") no-repeat center; }
.card[href*="billingconsole"]::after { mask: url("data:image/svg+xml,...") no-repeat center; }
/* ... (rest of the icon styles from original file) ... */
.card[href*="billingsummary"]::after { mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z'/%3E%3C/svg%3E") no-repeat center; }
.card[href*="billingconsole"]::after { mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z'/%3E%3C/svg%3E") no-repeat center; }
.card[href*="accountwisebreakup"]::after { mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z'/%3E%3C/svg%3E") no-repeat center; }
.card[href*="hourlydashboard"]::after { mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z'/%3E%3C/svg%3E") no-repeat center; }
.card[href*="costanalysis"]::after { mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M16 8v8m-4-5v5m-4-2v2m-2 4h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z'/%3E%3C/svg%3E") no-repeat center; }
.card[href*="costbreakup"]::after { mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z'/%3E%3C/svg%3E") no-repeat center; }
.card[href*="reports"]::after { mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z'/%3E%3C/svg%3E") no-repeat center; }
.card[href*="reservations"]::after { mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z'/%3E%3C/svg%3E") no-repeat center; }
.card[href*="recommendations"]::after { mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z'/%3E%3C/svg%3E") no-repeat center; }
.card[href*="cur"]::after { mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M9 17v-2a4 4 0 014-4h4m0 0l-4-4m4 4l-4 4M3 7h3m-3 4h2m-2 4h3'/%3E%3C/svg%3E") no-repeat center; }
.card.cardOverview::after { mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253'/%3E%3C/svg%3E") no-repeat center; }
.card[href*="scheduler"]::after { mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z'/%3E%3C/svg%3E") no-repeat center; }
.card[href*="spotbot"]::after { mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4'/%3E%3C/svg%3E") no-repeat center; }
.card[href*="account"]::after { mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z'/%3E%3C/svg%3E") no-repeat center; }
.card[href*="preferences"]::after { mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z'/%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M15 12a3 3 0 11-6 0 3 3 0 016 0z'/%3E%3C/svg%3E") no-repeat center; }
.card[href*="faq"]::after { mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M12 18h.01M12 14a4 4 0 100-8 4 4 0 000 8zm0 0v2'/%3E%3C/svg%3E") no-repeat center; }


/* --- Responsive Styles --- */
@media (max-width: 996px) { /* Docusaurus tablet breakpoint */
  .heroBanner {
    flex-direction: column;
  }

  .heroTextContainer {
    flex-basis: auto;
    border-radius: 0; /* Remove rounding on smaller screens */
    padding: 3rem 2rem;
    text-align: center;
    min-height: auto;
  }
  
  .heroTextContainer h1 {
    font-size: 36px;
    max-width: 100%;
  }

  .heroImageContainer {
    flex-basis: auto;
    order: -1; /* Move image above the text block */
    padding: 2rem 1rem 0;
  }
  
  .heroImageContainer img {
    max-height: 250px;
  }

  .mainContent {
    padding: 40px 20px;
  }

  .mainContent h2 {
    font-size: 2rem;
  }

  .cardGrid {
    grid-template-columns: 1fr;
    gap: 20px;
  }
}

@media (max-width: 1024px) and (min-width: 997px) {
  .cardGrid {
    grid-template-columns: repeat(2, 1fr);
    gap: 20px;
  }
}

// import React, {useCallback, useMemo, useRef, useState} from 'react';
// import {createPortal} from 'react-dom';
// import {DocSearchButton, useDocSearchKeyboardEvents} from '@docsearch/react';
// import Head from '@docusaurus/Head';
// import Link from '@docusaurus/Link';
// import {useHistory} from '@docusaurus/router';
// import {
//   isRegexpStringMatch,
//   useSearchLinkCreator,
// } from '@docusaurus/theme-common';
// import {
//   useAlgoliaContextualFacetFilters,
//   useSearchResultUrlProcessor,
// } from '@docusaurus/theme-search-algolia/client';
// import Translate from '@docusaurus/Translate';
// import useDocusaurusContext from '@docusaurus/useDocusaurusContext';
// import translations from '@theme/SearchTranslations';
// let DocSearchModal = null;
// function importDocSearchModalIfNeeded() {
//   if (DocSearchModal) {
//     return Promise.resolve();
//   }
//   return Promise.all([
//     import('@docsearch/react/modal'),
//     import('@docsearch/react/style'),
//     import('./styles.css'),
//   ]).then(([{DocSearchModal: Modal}]) => {
//     DocSearchModal = Modal;
//   });
// }
// function useNavigator({externalUrlRegex}) {
//   const history = useHistory();
//   const [navigator] = useState(() => {
//     return {
//       navigate(params) {
//         // Algolia results could contain URL's from other domains which cannot
//         // be served through history and should navigate with window.location
//         if (isRegexpStringMatch(externalUrlRegex, params.itemUrl)) {
//           window.location.href = params.itemUrl;
//         } else {
//           history.push(params.itemUrl);
//         }
//       },
//     };
//   });
//   return navigator;
// }
// function useTransformSearchClient() {
//   const {
//     siteMetadata: {docusaurusVersion},
//   } = useDocusaurusContext();
//   return useCallback(
//     (searchClient) => {
//       searchClient.addAlgoliaAgent('docusaurus', docusaurusVersion);
//       return searchClient;
//     },
//     [docusaurusVersion],
//   );
// }
// function useTransformItems(props) {
//   const processSearchResultUrl = useSearchResultUrlProcessor();
//   const [transformItems] = useState(() => {
//     return (items) =>
//       props.transformItems
//         ? // Custom transformItems
//           props.transformItems(items)
//         : // Default transformItems
//           items.map((item) => ({
//             ...item,
//             url: processSearchResultUrl(item.url),
//           }));
//   });
//   return transformItems;
// }
// function useResultsFooterComponent({closeModal}) {
//   return useMemo(
//     () =>
//       ({state}) =>
//         <ResultsFooter state={state} onClose={closeModal} />,
//     [closeModal],
//   );
// }
// function Hit({hit, children}) {
//   return <Link to={hit.url}>{children}</Link>;
// }
// function ResultsFooter({state, onClose}) {
//   const createSearchLink = useSearchLinkCreator();
//   return (
//     <Link to={createSearchLink(state.query)} onClick={onClose}>
//       <Translate
//         id="theme.SearchBar.seeAll"
//         values={{count: state.context.nbHits}}>
//         {'See all {count} results'}
//       </Translate>
//     </Link>
//   );
// }
// function useSearchParameters({contextualSearch, ...props}) {
//   function mergeFacetFilters(f1, f2) {
//     const normalize = (f) => (typeof f === 'string' ? [f] : f);
//     return [...normalize(f1), ...normalize(f2)];
//   }
//   const contextualSearchFacetFilters = useAlgoliaContextualFacetFilters();
//   const configFacetFilters = props.searchParameters?.facetFilters ?? [];
//   const facetFilters = contextualSearch
//     ? // Merge contextual search filters with config filters
//       mergeFacetFilters(contextualSearchFacetFilters, configFacetFilters)
//     : // ... or use config facetFilters
//       configFacetFilters;
//   // We let users override default searchParameters if they want to
//   return {
//     ...props.searchParameters,
//     facetFilters,
//   };
// }
// function DocSearch({externalUrlRegex, ...props}) {
//   const navigator = useNavigator({externalUrlRegex});
//   const searchParameters = useSearchParameters({...props});
//   const transformItems = useTransformItems(props);
//   const transformSearchClient = useTransformSearchClient();
//   const searchContainer = useRef(null);
//   // TODO remove "as any" after React 19 upgrade
//   const searchButtonRef = useRef(null);
//   const [isOpen, setIsOpen] = useState(false);
//   const [initialQuery, setInitialQuery] = useState(undefined);
//   const prepareSearchContainer = useCallback(() => {
//     if (!searchContainer.current) {
//       const divElement = document.createElement('div');
//       searchContainer.current = divElement;
//       document.body.insertBefore(divElement, document.body.firstChild);
//     }
//   }, []);
//   const openModal = useCallback(() => {
//     prepareSearchContainer();
//     importDocSearchModalIfNeeded().then(() => setIsOpen(true));
//   }, [prepareSearchContainer]);
//   const closeModal = useCallback(() => {
//     setIsOpen(false);
//     searchButtonRef.current?.focus();
//     setInitialQuery(undefined);
//   }, []);
//   const handleInput = useCallback(
//     (event) => {
//       if (event.key === 'f' && (event.metaKey || event.ctrlKey)) {
//         // ignore browser's ctrl+f
//         return;
//       }
//       // prevents duplicate key insertion in the modal input
//       event.preventDefault();
//       setInitialQuery(event.key);
//       openModal();
//     },
//     [openModal],
//   );
//   const resultsFooterComponent = useResultsFooterComponent({closeModal});
//   useDocSearchKeyboardEvents({
//     isOpen,
//     onOpen: openModal,
//     onClose: closeModal,
//     onInput: handleInput,
//     searchButtonRef,
//   });
//   return (
//     <>
//       <Head>
//         {/* This hints the browser that the website will load data from Algolia,
//         and allows it to preconnect to the DocSearch cluster. It makes the first
//         query faster, especially on mobile. */}
//         <link
//           rel="preconnect"
//           href={`https://${props.appId}-dsn.algolia.net`}
//           crossOrigin="anonymous"
//         />
//       </Head>

//       <DocSearchButton
//         onTouchStart={importDocSearchModalIfNeeded}
//         onFocus={importDocSearchModalIfNeeded}
//         onMouseOver={importDocSearchModalIfNeeded}
//         onClick={openModal}
//         ref={searchButtonRef}
//         translations={props.translations?.button ?? translations.button}
//       />

//       {isOpen &&
//         DocSearchModal &&
//         // TODO need to fix this React Compiler lint error
//         // eslint-disable-next-line react-compiler/react-compiler
//         searchContainer.current &&
//         createPortal(
//           <DocSearchModal
//             onClose={closeModal}
//             initialScrollY={window.scrollY}
//             initialQuery={initialQuery}
//             navigator={navigator}
//             transformItems={transformItems}
//             hitComponent={Hit}
//             transformSearchClient={transformSearchClient}
//             {...(props.searchPagePath && {
//               resultsFooterComponent,
//             })}
//             placeholder={translations.placeholder}
//             {...props}
//             translations={props.translations?.modal ?? translations.modal}
//             searchParameters={searchParameters}
//           />,
//           // TODO need to fix this React Compiler lint error
//           // eslint-disable-next-line react-compiler/react-compiler
//           searchContainer.current,
//         )}
//     </>
//   );
// }

// export default function SearchBar() {
//   const {siteConfig} = useDocusaurusContext();
//   return <DocSearch {...siteConfig.themeConfig.algolia} />;
// }

export default function SearchBar() {
  return null; // Hide search bar completely
}


:root {
  --docsearch-primary-color: var(--ifm-color-primary);
  --docsearch-text-color: var(--ifm-font-color-base);
}

.DocSearch-Button {
  margin: 0;
  transition: all var(--ifm-transition-fast)
    var(--ifm-transition-timing-default);
}

.DocSearch-Container {
  z-index: calc(var(--ifm-z-index-fixed) + 1);
}


